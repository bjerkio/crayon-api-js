/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AzurePlan,
    AzurePlanFromJSON,
    AzurePlanToJSON,
    CustomerTenant,
    CustomerTenantFromJSON,
    CustomerTenantToJSON,
    CustomerTenantDetailed,
    CustomerTenantDetailedFromJSON,
    CustomerTenantDetailedToJSON,
    CustomerTenantType,
    CustomerTenantTypeFromJSON,
    CustomerTenantTypeToJSON,
} from '../models';

export interface CreateCustomerTenantRequest {
    customerTenantDetailed?: CustomerTenantDetailed;
}

export interface CreateCustomerTenantFromExistingRequest {
    syncFromPublisher?: boolean;
    customerTenantDetailed?: CustomerTenantDetailed;
}

export interface DeleteCustomerTenantRequest {
    id: number;
}

export interface GetCustomerTenantRequest {
    id: number;
}

export interface GetCustomerTenantDetailsRequest {
    id: number;
}

export interface ListCustomerTenantAzurePlanRequest {
    customerTenantId: number;
}

export interface ListCustomerTenantsRequest {
    organizationId?: number;
    publisherId?: number;
    programId?: number;
    consumerId?: number;
    domain?: string | null;
    domainPrefix?: string | null;
    customerTenantType?: CustomerTenantType;
    invoiceProfileId?: number;
    page?: number;
    pageSize?: number;
    search?: string | null;
}

export interface UpdateCustomerTenantRequest {
    id: number;
    customerTenantDetailed?: CustomerTenantDetailed;
}

/**
 * 
 */
export class CustomerTenantsApi extends runtime.BaseAPI {

    /**
     */
    async createCustomerTenantRaw(requestParameters: CreateCustomerTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerTenantDetailed>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/CustomerTenants`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerTenantDetailedToJSON(requestParameters.customerTenantDetailed),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerTenantDetailedFromJSON(jsonValue));
    }

    /**
     */
    async createCustomerTenant(requestParameters: CreateCustomerTenantRequest, initOverrides?: RequestInit): Promise<CustomerTenantDetailed> {
        const response = await this.createCustomerTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createCustomerTenantFromExistingRaw(requestParameters: CreateCustomerTenantFromExistingRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerTenantDetailed>> {
        const queryParameters: any = {};

        if (requestParameters.syncFromPublisher !== undefined) {
            queryParameters['syncFromPublisher'] = requestParameters.syncFromPublisher;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/CustomerTenants/existing`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerTenantDetailedToJSON(requestParameters.customerTenantDetailed),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerTenantDetailedFromJSON(jsonValue));
    }

    /**
     */
    async createCustomerTenantFromExisting(requestParameters: CreateCustomerTenantFromExistingRequest, initOverrides?: RequestInit): Promise<CustomerTenantDetailed> {
        const response = await this.createCustomerTenantFromExistingRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteCustomerTenantRaw(requestParameters: DeleteCustomerTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCustomerTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/CustomerTenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteCustomerTenant(requestParameters: DeleteCustomerTenantRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteCustomerTenantRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getCustomerTenantRaw(requestParameters: GetCustomerTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerTenant>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomerTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/CustomerTenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerTenantFromJSON(jsonValue));
    }

    /**
     */
    async getCustomerTenant(requestParameters: GetCustomerTenantRequest, initOverrides?: RequestInit): Promise<CustomerTenant> {
        const response = await this.getCustomerTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCustomerTenantDetailsRaw(requestParameters: GetCustomerTenantDetailsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerTenantDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCustomerTenantDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/CustomerTenants/{id}/detailed`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerTenantDetailedFromJSON(jsonValue));
    }

    /**
     */
    async getCustomerTenantDetails(requestParameters: GetCustomerTenantDetailsRequest, initOverrides?: RequestInit): Promise<CustomerTenantDetailed> {
        const response = await this.getCustomerTenantDetailsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listCustomerTenantAzurePlanRaw(requestParameters: ListCustomerTenantAzurePlanRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AzurePlan>> {
        if (requestParameters.customerTenantId === null || requestParameters.customerTenantId === undefined) {
            throw new runtime.RequiredError('customerTenantId','Required parameter requestParameters.customerTenantId was null or undefined when calling listCustomerTenantAzurePlan.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/CustomerTenants/{customerTenantId}/azurePlan`.replace(`{${"customerTenantId"}}`, encodeURIComponent(String(requestParameters.customerTenantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzurePlanFromJSON(jsonValue));
    }

    /**
     */
    async listCustomerTenantAzurePlan(requestParameters: ListCustomerTenantAzurePlanRequest, initOverrides?: RequestInit): Promise<AzurePlan> {
        const response = await this.listCustomerTenantAzurePlanRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listCustomerTenantsRaw(requestParameters: ListCustomerTenantsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CustomerTenant>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['OrganizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.publisherId !== undefined) {
            queryParameters['PublisherId'] = requestParameters.publisherId;
        }

        if (requestParameters.programId !== undefined) {
            queryParameters['ProgramId'] = requestParameters.programId;
        }

        if (requestParameters.consumerId !== undefined) {
            queryParameters['ConsumerId'] = requestParameters.consumerId;
        }

        if (requestParameters.domain !== undefined) {
            queryParameters['Domain'] = requestParameters.domain;
        }

        if (requestParameters.domainPrefix !== undefined) {
            queryParameters['DomainPrefix'] = requestParameters.domainPrefix;
        }

        if (requestParameters.customerTenantType !== undefined) {
            queryParameters['CustomerTenantType'] = requestParameters.customerTenantType;
        }

        if (requestParameters.invoiceProfileId !== undefined) {
            queryParameters['InvoiceProfileId'] = requestParameters.invoiceProfileId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/CustomerTenants`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerTenantFromJSON));
    }

    /**
     */
    async listCustomerTenants(requestParameters: ListCustomerTenantsRequest, initOverrides?: RequestInit): Promise<Array<CustomerTenant>> {
        const response = await this.listCustomerTenantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateCustomerTenantRaw(requestParameters: UpdateCustomerTenantRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<CustomerTenantDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCustomerTenant.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/CustomerTenants/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CustomerTenantDetailedToJSON(requestParameters.customerTenantDetailed),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CustomerTenantDetailedFromJSON(jsonValue));
    }

    /**
     */
    async updateCustomerTenant(requestParameters: UpdateCustomerTenantRequest, initOverrides?: RequestInit): Promise<CustomerTenantDetailed> {
        const response = await this.updateCustomerTenantRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
