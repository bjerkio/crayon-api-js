/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AgreementTypeConsent,
    AgreementTypeConsentFromJSON,
    AgreementTypeConsentToJSON,
    ServiceAccountAgreement,
    ServiceAccountAgreementFromJSON,
    ServiceAccountAgreementToJSON,
} from '../models';

export interface CustomertenantsCustomerTenantIdAgreementsGetRequest {
    customerTenantId: number;
    agreementTypeConsent?: AgreementTypeConsent;
}

export interface CustomertenantsCustomerTenantIdAgreementsPostRequest {
    customerTenantId: number;
    serviceAccountAgreement?: ServiceAccountAgreement;
}

/**
 * 
 */
export class CustomerTenantAgreementsApi extends runtime.BaseAPI {

    /**
     */
    async customertenantsCustomerTenantIdAgreementsGetRaw(requestParameters: CustomertenantsCustomerTenantIdAgreementsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ServiceAccountAgreement>>> {
        if (requestParameters.customerTenantId === null || requestParameters.customerTenantId === undefined) {
            throw new runtime.RequiredError('customerTenantId','Required parameter requestParameters.customerTenantId was null or undefined when calling customertenantsCustomerTenantIdAgreementsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.agreementTypeConsent !== undefined) {
            queryParameters['AgreementTypeConsent'] = requestParameters.agreementTypeConsent;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customertenants/{customerTenantId}/agreements`.replace(`{${"customerTenantId"}}`, encodeURIComponent(String(requestParameters.customerTenantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ServiceAccountAgreementFromJSON));
    }

    /**
     */
    async customertenantsCustomerTenantIdAgreementsGet(requestParameters: CustomertenantsCustomerTenantIdAgreementsGetRequest, initOverrides?: RequestInit): Promise<Array<ServiceAccountAgreement>> {
        const response = await this.customertenantsCustomerTenantIdAgreementsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async customertenantsCustomerTenantIdAgreementsPostRaw(requestParameters: CustomertenantsCustomerTenantIdAgreementsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ServiceAccountAgreement>> {
        if (requestParameters.customerTenantId === null || requestParameters.customerTenantId === undefined) {
            throw new runtime.RequiredError('customerTenantId','Required parameter requestParameters.customerTenantId was null or undefined when calling customertenantsCustomerTenantIdAgreementsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/customertenants/{customerTenantId}/agreements`.replace(`{${"customerTenantId"}}`, encodeURIComponent(String(requestParameters.customerTenantId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ServiceAccountAgreementToJSON(requestParameters.serviceAccountAgreement),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceAccountAgreementFromJSON(jsonValue));
    }

    /**
     */
    async customertenantsCustomerTenantIdAgreementsPost(requestParameters: CustomertenantsCustomerTenantIdAgreementsPostRequest, initOverrides?: RequestInit): Promise<ServiceAccountAgreement> {
        const response = await this.customertenantsCustomerTenantIdAgreementsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
