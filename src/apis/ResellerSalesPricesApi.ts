/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  ResellerSalesPrice,
  ResellerSalesPriceFromJSON,
  ResellerSalesPriceToJSON,
  ResellerSalesPriceObjectType,
  ResellerSalesPriceObjectTypeFromJSON,
  ResellerSalesPriceObjectTypeToJSON,
  ResellerSalesPriceToggle,
  ResellerSalesPriceToggleFromJSON,
  ResellerSalesPriceToggleToJSON,
  ResellerSalesPriceType,
  ResellerSalesPriceTypeFromJSON,
  ResellerSalesPriceTypeToJSON,
} from '../models';

export interface CreateResellerSalesPricesRequest {
  resellerSalesPrice?: ResellerSalesPrice;
}

export interface DeleteResellerSalesPricesRequest {
  type?: ResellerSalesPriceType;
  objectId?: number;
  objectType?: ResellerSalesPriceObjectType;
  fromDate?: Date | null;
}

export interface GetCurrentResellerSalesPricesRequest {
  type?: ResellerSalesPriceType;
  objectId?: number;
  objectType?: ResellerSalesPriceObjectType;
  fromDate?: Date | null;
}

export interface GetResellerSalesPricesRequest {
  type?: ResellerSalesPriceType;
  objectId?: number;
  objectType?: ResellerSalesPriceObjectType;
  fromDate?: Date | null;
}

export interface GetResellerSalesPricesByDateRequest {
  oldFromDate: Date;
  resellerSalesPrice?: ResellerSalesPrice;
}

export interface ToggleResellerSalesPricesRequest {
  resellerSalesPriceToggle?: ResellerSalesPriceToggle;
}

/**
 *
 */
export class ResellerSalesPricesApi extends runtime.BaseAPI {
  /**
   */
  async createResellerSalesPricesRaw(
    requestParameters: CreateResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ResellerSalesPrice>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/ResellerSalesPrices`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ResellerSalesPriceToJSON(requestParameters.resellerSalesPrice),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ResellerSalesPriceFromJSON(jsonValue),
    );
  }

  /**
   */
  async createResellerSalesPrices(
    requestParameters: CreateResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<ResellerSalesPrice> {
    const response = await this.createResellerSalesPricesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async deleteResellerSalesPricesRaw(
    requestParameters: DeleteResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    if (requestParameters.type !== undefined) {
      queryParameters['Type'] = requestParameters.type;
    }

    if (requestParameters.objectId !== undefined) {
      queryParameters['ObjectId'] = requestParameters.objectId;
    }

    if (requestParameters.objectType !== undefined) {
      queryParameters['ObjectType'] = requestParameters.objectType;
    }

    if (requestParameters.fromDate !== undefined) {
      queryParameters['FromDate'] = (
        requestParameters.fromDate as any
      ).toISOString();
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/ResellerSalesPrices`,
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteResellerSalesPrices(
    requestParameters: DeleteResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.deleteResellerSalesPricesRaw(requestParameters, initOverrides);
  }

  /**
   */
  async getCurrentResellerSalesPricesRaw(
    requestParameters: GetCurrentResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ResellerSalesPrice>> {
    const queryParameters: any = {};

    if (requestParameters.type !== undefined) {
      queryParameters['Type'] = requestParameters.type;
    }

    if (requestParameters.objectId !== undefined) {
      queryParameters['ObjectId'] = requestParameters.objectId;
    }

    if (requestParameters.objectType !== undefined) {
      queryParameters['ObjectType'] = requestParameters.objectType;
    }

    if (requestParameters.fromDate !== undefined) {
      queryParameters['FromDate'] = (
        requestParameters.fromDate as any
      ).toISOString();
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/ResellerSalesPrices/current`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ResellerSalesPriceFromJSON(jsonValue),
    );
  }

  /**
   */
  async getCurrentResellerSalesPrices(
    requestParameters: GetCurrentResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<ResellerSalesPrice> {
    const response = await this.getCurrentResellerSalesPricesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async getResellerSalesPricesRaw(
    requestParameters: GetResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<ResellerSalesPrice>>> {
    const queryParameters: any = {};

    if (requestParameters.type !== undefined) {
      queryParameters['Type'] = requestParameters.type;
    }

    if (requestParameters.objectId !== undefined) {
      queryParameters['ObjectId'] = requestParameters.objectId;
    }

    if (requestParameters.objectType !== undefined) {
      queryParameters['ObjectType'] = requestParameters.objectType;
    }

    if (requestParameters.fromDate !== undefined) {
      queryParameters['FromDate'] = (
        requestParameters.fromDate as any
      ).toISOString();
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/ResellerSalesPrices`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(ResellerSalesPriceFromJSON),
    );
  }

  /**
   */
  async getResellerSalesPrices(
    requestParameters: GetResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<ResellerSalesPrice>> {
    const response = await this.getResellerSalesPricesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async getResellerSalesPricesByDateRaw(
    requestParameters: GetResellerSalesPricesByDateRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<ResellerSalesPrice>> {
    if (
      requestParameters.oldFromDate === null ||
      requestParameters.oldFromDate === undefined
    ) {
      throw new runtime.RequiredError(
        'oldFromDate',
        'Required parameter requestParameters.oldFromDate was null or undefined when calling getResellerSalesPricesByDate.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/ResellerSalesPrices/{oldFromDate}`.replace(
          `{${'oldFromDate'}}`,
          encodeURIComponent(String(requestParameters.oldFromDate)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ResellerSalesPriceToJSON(requestParameters.resellerSalesPrice),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      ResellerSalesPriceFromJSON(jsonValue),
    );
  }

  /**
   */
  async getResellerSalesPricesByDate(
    requestParameters: GetResellerSalesPricesByDateRequest,
    initOverrides?: RequestInit,
  ): Promise<ResellerSalesPrice> {
    const response = await this.getResellerSalesPricesByDateRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async toggleResellerSalesPricesRaw(
    requestParameters: ToggleResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/ResellerSalesPrices/toggle`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ResellerSalesPriceToggleToJSON(
          requestParameters.resellerSalesPriceToggle,
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async toggleResellerSalesPrices(
    requestParameters: ToggleResellerSalesPricesRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.toggleResellerSalesPricesRaw(requestParameters, initOverrides);
  }
}
