/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ResellerSalesPrice,
    ResellerSalesPriceFromJSON,
    ResellerSalesPriceToJSON,
    ResellerSalesPriceObjectType,
    ResellerSalesPriceObjectTypeFromJSON,
    ResellerSalesPriceObjectTypeToJSON,
    ResellerSalesPriceToggle,
    ResellerSalesPriceToggleFromJSON,
    ResellerSalesPriceToggleToJSON,
    ResellerSalesPriceType,
    ResellerSalesPriceTypeFromJSON,
    ResellerSalesPriceTypeToJSON,
} from '../models';

export interface ResellerSalesPricesCurrentGetRequest {
    type?: ResellerSalesPriceType;
    objectId?: number;
    objectType?: ResellerSalesPriceObjectType;
    fromDate?: Date | null;
}

export interface ResellerSalesPricesDeleteRequest {
    type?: ResellerSalesPriceType;
    objectId?: number;
    objectType?: ResellerSalesPriceObjectType;
    fromDate?: Date | null;
}

export interface ResellerSalesPricesGetRequest {
    type?: ResellerSalesPriceType;
    objectId?: number;
    objectType?: ResellerSalesPriceObjectType;
    fromDate?: Date | null;
}

export interface ResellerSalesPricesOldFromDatePutRequest {
    oldFromDate: Date;
    resellerSalesPrice?: ResellerSalesPrice;
}

export interface ResellerSalesPricesPostRequest {
    resellerSalesPrice?: ResellerSalesPrice;
}

export interface ResellerSalesPricesTogglePostRequest {
    resellerSalesPriceToggle?: ResellerSalesPriceToggle;
}

/**
 * 
 */
export class ResellerSalesPricesApi extends runtime.BaseAPI {

    /**
     */
    async resellerSalesPricesCurrentGetRaw(requestParameters: ResellerSalesPricesCurrentGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResellerSalesPrice>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['Type'] = requestParameters.type;
        }

        if (requestParameters.objectId !== undefined) {
            queryParameters['ObjectId'] = requestParameters.objectId;
        }

        if (requestParameters.objectType !== undefined) {
            queryParameters['ObjectType'] = requestParameters.objectType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['FromDate'] = (requestParameters.fromDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/ResellerSalesPrices/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResellerSalesPriceFromJSON(jsonValue));
    }

    /**
     */
    async resellerSalesPricesCurrentGet(requestParameters: ResellerSalesPricesCurrentGetRequest, initOverrides?: RequestInit): Promise<ResellerSalesPrice> {
        const response = await this.resellerSalesPricesCurrentGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resellerSalesPricesDeleteRaw(requestParameters: ResellerSalesPricesDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['Type'] = requestParameters.type;
        }

        if (requestParameters.objectId !== undefined) {
            queryParameters['ObjectId'] = requestParameters.objectId;
        }

        if (requestParameters.objectType !== undefined) {
            queryParameters['ObjectType'] = requestParameters.objectType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['FromDate'] = (requestParameters.fromDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/ResellerSalesPrices`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resellerSalesPricesDelete(requestParameters: ResellerSalesPricesDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.resellerSalesPricesDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async resellerSalesPricesGetRaw(requestParameters: ResellerSalesPricesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ResellerSalesPrice>>> {
        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['Type'] = requestParameters.type;
        }

        if (requestParameters.objectId !== undefined) {
            queryParameters['ObjectId'] = requestParameters.objectId;
        }

        if (requestParameters.objectType !== undefined) {
            queryParameters['ObjectType'] = requestParameters.objectType;
        }

        if (requestParameters.fromDate !== undefined) {
            queryParameters['FromDate'] = (requestParameters.fromDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/ResellerSalesPrices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResellerSalesPriceFromJSON));
    }

    /**
     */
    async resellerSalesPricesGet(requestParameters: ResellerSalesPricesGetRequest, initOverrides?: RequestInit): Promise<Array<ResellerSalesPrice>> {
        const response = await this.resellerSalesPricesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resellerSalesPricesOldFromDatePutRaw(requestParameters: ResellerSalesPricesOldFromDatePutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResellerSalesPrice>> {
        if (requestParameters.oldFromDate === null || requestParameters.oldFromDate === undefined) {
            throw new runtime.RequiredError('oldFromDate','Required parameter requestParameters.oldFromDate was null or undefined when calling resellerSalesPricesOldFromDatePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/ResellerSalesPrices/{oldFromDate}`.replace(`{${"oldFromDate"}}`, encodeURIComponent(String(requestParameters.oldFromDate))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ResellerSalesPriceToJSON(requestParameters.resellerSalesPrice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResellerSalesPriceFromJSON(jsonValue));
    }

    /**
     */
    async resellerSalesPricesOldFromDatePut(requestParameters: ResellerSalesPricesOldFromDatePutRequest, initOverrides?: RequestInit): Promise<ResellerSalesPrice> {
        const response = await this.resellerSalesPricesOldFromDatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resellerSalesPricesPostRaw(requestParameters: ResellerSalesPricesPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ResellerSalesPrice>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/ResellerSalesPrices`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResellerSalesPriceToJSON(requestParameters.resellerSalesPrice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResellerSalesPriceFromJSON(jsonValue));
    }

    /**
     */
    async resellerSalesPricesPost(requestParameters: ResellerSalesPricesPostRequest, initOverrides?: RequestInit): Promise<ResellerSalesPrice> {
        const response = await this.resellerSalesPricesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resellerSalesPricesTogglePostRaw(requestParameters: ResellerSalesPricesTogglePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/ResellerSalesPrices/toggle`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResellerSalesPriceToggleToJSON(requestParameters.resellerSalesPriceToggle),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resellerSalesPricesTogglePost(requestParameters: ResellerSalesPricesTogglePostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.resellerSalesPricesTogglePostRaw(requestParameters, initOverrides);
    }

}
