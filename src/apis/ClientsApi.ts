/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Client,
    ClientFromJSON,
    ClientToJSON,
} from '../models';

export interface ClientsClientIdDeleteRequest {
    clientId: string | null;
}

export interface ClientsClientIdGetRequest {
    clientId: string | null;
}

export interface ClientsClientIdPutRequest {
    clientId: string | null;
    client?: Client;
}

export interface ClientsGetRequest {
    page?: number;
    pageSize?: number;
    search?: string | null;
}

export interface ClientsPostRequest {
    client?: Client;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     */
    async clientsClientIdDeleteRaw(requestParameters: ClientsClientIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling clientsClientIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Clients/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async clientsClientIdDelete(requestParameters: ClientsClientIdDeleteRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.clientsClientIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clientsClientIdGetRaw(requestParameters: ClientsClientIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Client>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling clientsClientIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Clients/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientFromJSON(jsonValue));
    }

    /**
     */
    async clientsClientIdGet(requestParameters: ClientsClientIdGetRequest, initOverrides?: RequestInit): Promise<Client> {
        const response = await this.clientsClientIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clientsClientIdPutRaw(requestParameters: ClientsClientIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Client>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling clientsClientIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Clients/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientToJSON(requestParameters.client),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientFromJSON(jsonValue));
    }

    /**
     */
    async clientsClientIdPut(requestParameters: ClientsClientIdPutRequest, initOverrides?: RequestInit): Promise<Client> {
        const response = await this.clientsClientIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clientsGetRaw(requestParameters: ClientsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Client>>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientFromJSON));
    }

    /**
     */
    async clientsGet(requestParameters: ClientsGetRequest, initOverrides?: RequestInit): Promise<Array<Client>> {
        const response = await this.clientsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async clientsPostRaw(requestParameters: ClientsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Client>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Clients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientToJSON(requestParameters.client),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientFromJSON(jsonValue));
    }

    /**
     */
    async clientsPost(requestParameters: ClientsPostRequest, initOverrides?: RequestInit): Promise<Client> {
        const response = await this.clientsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
