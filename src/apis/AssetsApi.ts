/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Asset,
    AssetFromJSON,
    AssetToJSON,
    AssetOrder,
    AssetOrderFromJSON,
    AssetOrderToJSON,
    AssetSortBy,
    AssetSortByFromJSON,
    AssetSortByToJSON,
    AssetStatus,
    AssetStatusFromJSON,
    AssetStatusToJSON,
    AssetTags,
    AssetTagsFromJSON,
    AssetTagsToJSON,
    AssetType,
    AssetTypeFromJSON,
    AssetTypeToJSON,
    SortOrder,
    SortOrderFromJSON,
    SortOrderToJSON,
} from '../models';

export interface ApiV1AssetsAssetIdPutRequest {
    assetId: number;
    asset?: Asset;
}

export interface ApiV1AssetsAssetIdTagsDeleteRequest {
    assetId: number;
}

export interface ApiV1AssetsAssetIdTagsPostRequest {
    assetId: number;
    assetTags?: AssetTags;
}

export interface ApiV1AssetsAssetIdTagsPutRequest {
    assetId: number;
    assetTags?: AssetTags;
}

export interface ApiV1AssetsCheckoutPostRequest {
    assetOrder?: AssetOrder;
}

export interface ApiV1AssetsGetRequest {
    resellerCustomerId?: number;
    publisherId?: number;
    externalOrderId?: string | null;
    externalOrderIds?: Array<string> | null;
    reservationId?: string | null;
    assetType?: AssetType;
    status?: AssetStatus;
    page?: number;
    pageSize?: number;
    search?: string | null;
    sortBy?: AssetSortBy;
    sortOrder?: SortOrder;
}

export interface ApiV1AssetsIdGetRequest {
    id: number;
}

export interface ApiV1AssetsOrdersGetRequest {
    resellerCustomerId?: number;
    publisherId?: number;
    externalOrderId?: string | null;
    externalOrderIds?: Array<string> | null;
    reservationId?: string | null;
    assetType?: AssetType;
    status?: AssetStatus;
    page?: number;
    pageSize?: number;
    search?: string | null;
    sortBy?: AssetSortBy;
    sortOrder?: SortOrder;
}

export interface ApiV1AssetsVerifyPostRequest {
    assetOrder?: AssetOrder;
}

/**
 * 
 */
export class AssetsApi extends runtime.BaseAPI {

    /**
     */
    async apiV1AssetsAssetIdPutRaw(requestParameters: ApiV1AssetsAssetIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling apiV1AssetsAssetIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets/{assetId}`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetToJSON(requestParameters.asset),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1AssetsAssetIdPut(requestParameters: ApiV1AssetsAssetIdPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1AssetsAssetIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1AssetsAssetIdTagsDeleteRaw(requestParameters: ApiV1AssetsAssetIdTagsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling apiV1AssetsAssetIdTagsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets/{assetId}/tags`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1AssetsAssetIdTagsDelete(requestParameters: ApiV1AssetsAssetIdTagsDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1AssetsAssetIdTagsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1AssetsAssetIdTagsPostRaw(requestParameters: ApiV1AssetsAssetIdTagsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling apiV1AssetsAssetIdTagsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets/{assetId}/tags`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetTagsToJSON(requestParameters.assetTags),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1AssetsAssetIdTagsPost(requestParameters: ApiV1AssetsAssetIdTagsPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1AssetsAssetIdTagsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1AssetsAssetIdTagsPutRaw(requestParameters: ApiV1AssetsAssetIdTagsPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling apiV1AssetsAssetIdTagsPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets/{assetId}/tags`.replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssetTagsToJSON(requestParameters.assetTags),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1AssetsAssetIdTagsPut(requestParameters: ApiV1AssetsAssetIdTagsPutRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1AssetsAssetIdTagsPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1AssetsCheckoutPostRaw(requestParameters: ApiV1AssetsCheckoutPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets/checkout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetOrderToJSON(requestParameters.assetOrder),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1AssetsCheckoutPost(requestParameters: ApiV1AssetsCheckoutPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1AssetsCheckoutPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1AssetsGetRaw(requestParameters: ApiV1AssetsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Asset>>> {
        const queryParameters: any = {};

        if (requestParameters.resellerCustomerId !== undefined) {
            queryParameters['ResellerCustomerId'] = requestParameters.resellerCustomerId;
        }

        if (requestParameters.publisherId !== undefined) {
            queryParameters['PublisherId'] = requestParameters.publisherId;
        }

        if (requestParameters.externalOrderId !== undefined) {
            queryParameters['ExternalOrderId'] = requestParameters.externalOrderId;
        }

        if (requestParameters.externalOrderIds) {
            queryParameters['ExternalOrderIds'] = requestParameters.externalOrderIds;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['ReservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.assetType !== undefined) {
            queryParameters['AssetType'] = requestParameters.assetType;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['SortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetFromJSON));
    }

    /**
     */
    async apiV1AssetsGet(requestParameters: ApiV1AssetsGetRequest, initOverrides?: RequestInit): Promise<Array<Asset>> {
        const response = await this.apiV1AssetsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AssetsIdGetRaw(requestParameters: ApiV1AssetsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Asset>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1AssetsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AssetsIdGet(requestParameters: ApiV1AssetsIdGetRequest, initOverrides?: RequestInit): Promise<Asset> {
        const response = await this.apiV1AssetsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AssetsOrdersGetRaw(requestParameters: ApiV1AssetsOrdersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AssetOrder>>> {
        const queryParameters: any = {};

        if (requestParameters.resellerCustomerId !== undefined) {
            queryParameters['ResellerCustomerId'] = requestParameters.resellerCustomerId;
        }

        if (requestParameters.publisherId !== undefined) {
            queryParameters['PublisherId'] = requestParameters.publisherId;
        }

        if (requestParameters.externalOrderId !== undefined) {
            queryParameters['ExternalOrderId'] = requestParameters.externalOrderId;
        }

        if (requestParameters.externalOrderIds) {
            queryParameters['ExternalOrderIds'] = requestParameters.externalOrderIds;
        }

        if (requestParameters.reservationId !== undefined) {
            queryParameters['ReservationId'] = requestParameters.reservationId;
        }

        if (requestParameters.assetType !== undefined) {
            queryParameters['AssetType'] = requestParameters.assetType;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['Status'] = requestParameters.status;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['SortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets/orders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AssetOrderFromJSON));
    }

    /**
     */
    async apiV1AssetsOrdersGet(requestParameters: ApiV1AssetsOrdersGetRequest, initOverrides?: RequestInit): Promise<Array<AssetOrder>> {
        const response = await this.apiV1AssetsOrdersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AssetsVerifyPostRaw(requestParameters: ApiV1AssetsVerifyPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AssetOrder>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/Assets/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AssetOrderToJSON(requestParameters.assetOrder),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AssetOrderFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AssetsVerifyPost(requestParameters: ApiV1AssetsVerifyPostRequest, initOverrides?: RequestInit): Promise<AssetOrder> {
        const response = await this.apiV1AssetsVerifyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
