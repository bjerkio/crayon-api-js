/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  Organization,
  OrganizationFromJSON,
  OrganizationToJSON,
  OrganizationSalesContact,
  OrganizationSalesContactFromJSON,
  OrganizationSalesContactToJSON,
} from '../models';

export interface GetOrganizationRequest {
  id: number;
}

export interface GetOrganizationHazAccessRequest {
  id: number;
}

export interface ListOrganizationsRequest {
  page?: number;
  pageSize?: number;
  search?: string | null;
}

export interface ListSalesContactsRequest {
  organizationId: number;
}

/**
 *
 */
export class OrganizationsApi extends runtime.BaseAPI {
  /**
   */
  async getOrganizationRaw(
    requestParameters: GetOrganizationRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Organization>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getOrganization.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Organizations/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      OrganizationFromJSON(jsonValue),
    );
  }

  /**
   */
  async getOrganization(
    requestParameters: GetOrganizationRequest,
    initOverrides?: RequestInit,
  ): Promise<Organization> {
    const response = await this.getOrganizationRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async getOrganizationHazAccessRaw(
    requestParameters: GetOrganizationHazAccessRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getOrganizationHazAccess.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Organizations/HasAccess/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async getOrganizationHazAccess(
    requestParameters: GetOrganizationHazAccessRequest,
    initOverrides?: RequestInit,
  ): Promise<boolean> {
    const response = await this.getOrganizationHazAccessRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async listOrganizationsRaw(
    requestParameters: ListOrganizationsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Organization>>> {
    const queryParameters: any = {};

    if (requestParameters.page !== undefined) {
      queryParameters['Page'] = requestParameters.page;
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['PageSize'] = requestParameters.pageSize;
    }

    if (requestParameters.search !== undefined) {
      queryParameters['Search'] = requestParameters.search;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Organizations`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(OrganizationFromJSON),
    );
  }

  /**
   */
  async listOrganizations(
    requestParameters: ListOrganizationsRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<Organization>> {
    const response = await this.listOrganizationsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async listSalesContactsRaw(
    requestParameters: ListSalesContactsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<OrganizationSalesContact>> {
    if (
      requestParameters.organizationId === null ||
      requestParameters.organizationId === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling listSalesContacts.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Organizations/{organizationId}/salescontact`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      OrganizationSalesContactFromJSON(jsonValue),
    );
  }

  /**
   */
  async listSalesContacts(
    requestParameters: ListSalesContactsRequest,
    initOverrides?: RequestInit,
  ): Promise<OrganizationSalesContact> {
    const response = await this.listSalesContactsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
