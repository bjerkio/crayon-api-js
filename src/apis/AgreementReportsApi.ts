/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AgreementReport,
    AgreementReportFromJSON,
    AgreementReportToJSON,
} from '../models';

export interface AgreementReportsAgreementIdPutRequest {
    agreementId: number;
    agreementReport?: AgreementReport;
}

export interface AgreementReportsProductContainerIdGetRequest {
    productContainerId: number;
}

/**
 * 
 */
export class AgreementReportsApi extends runtime.BaseAPI {

    /**
     */
    async agreementReportsAgreementIdPutRaw(requestParameters: AgreementReportsAgreementIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AgreementReport>> {
        if (requestParameters.agreementId === null || requestParameters.agreementId === undefined) {
            throw new runtime.RequiredError('agreementId','Required parameter requestParameters.agreementId was null or undefined when calling agreementReportsAgreementIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/AgreementReports/{agreementId}`.replace(`{${"agreementId"}}`, encodeURIComponent(String(requestParameters.agreementId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AgreementReportToJSON(requestParameters.agreementReport),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AgreementReportFromJSON(jsonValue));
    }

    /**
     */
    async agreementReportsAgreementIdPut(requestParameters: AgreementReportsAgreementIdPutRequest, initOverrides?: RequestInit): Promise<AgreementReport> {
        const response = await this.agreementReportsAgreementIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agreementReportsProductContainerIdGetRaw(requestParameters: AgreementReportsProductContainerIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AgreementReport>>> {
        if (requestParameters.productContainerId === null || requestParameters.productContainerId === undefined) {
            throw new runtime.RequiredError('productContainerId','Required parameter requestParameters.productContainerId was null or undefined when calling agreementReportsProductContainerIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/AgreementReports/{productContainerId}`.replace(`{${"productContainerId"}}`, encodeURIComponent(String(requestParameters.productContainerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgreementReportFromJSON));
    }

    /**
     */
    async agreementReportsProductContainerIdGet(requestParameters: AgreementReportsProductContainerIdGetRequest, initOverrides?: RequestInit): Promise<Array<AgreementReport>> {
        const response = await this.agreementReportsProductContainerIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
