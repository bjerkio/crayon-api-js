/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  AgreementReport,
  AgreementReportFromJSON,
  AgreementReportToJSON,
} from '../models';

export interface ListAgreementReportsRequest {
  productContainerId: number;
}

export interface UpdateAgreementReportRequest {
  agreementId: number;
  agreementReport?: AgreementReport;
}

/**
 *
 */
export class AgreementReportsApi extends runtime.BaseAPI {
  /**
   */
  async listAgreementReportsRaw(
    requestParameters: ListAgreementReportsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<AgreementReport>>> {
    if (
      requestParameters.productContainerId === null ||
      requestParameters.productContainerId === undefined
    ) {
      throw new runtime.RequiredError(
        'productContainerId',
        'Required parameter requestParameters.productContainerId was null or undefined when calling listAgreementReports.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AgreementReports/{productContainerId}`.replace(
          `{${'productContainerId'}}`,
          encodeURIComponent(String(requestParameters.productContainerId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(AgreementReportFromJSON),
    );
  }

  /**
   */
  async listAgreementReports(
    requestParameters: ListAgreementReportsRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<AgreementReport>> {
    const response = await this.listAgreementReportsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async updateAgreementReportRaw(
    requestParameters: UpdateAgreementReportRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<AgreementReport>> {
    if (
      requestParameters.agreementId === null ||
      requestParameters.agreementId === undefined
    ) {
      throw new runtime.RequiredError(
        'agreementId',
        'Required parameter requestParameters.agreementId was null or undefined when calling updateAgreementReport.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AgreementReports/{agreementId}`.replace(
          `{${'agreementId'}}`,
          encodeURIComponent(String(requestParameters.agreementId)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: AgreementReportToJSON(requestParameters.agreementReport),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      AgreementReportFromJSON(jsonValue),
    );
  }

  /**
   */
  async updateAgreementReport(
    requestParameters: UpdateAgreementReportRequest,
    initOverrides?: RequestInit,
  ): Promise<AgreementReport> {
    const response = await this.updateAgreementReportRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
