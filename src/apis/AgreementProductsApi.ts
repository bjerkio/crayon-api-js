/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AgreementProduct,
    AgreementProductFromJSON,
    AgreementProductToJSON,
    AgreementProductFilter,
    AgreementProductFilterFromJSON,
    AgreementProductFilterToJSON,
    AgreementType,
    AgreementTypeFromJSON,
    AgreementTypeToJSON,
    BillingCycleEnum,
    BillingCycleEnumFromJSON,
    BillingCycleEnumToJSON,
    SortOrder,
    SortOrderFromJSON,
    SortOrderToJSON,
} from '../models';

export interface AgreementProductsFileXlsxPostRequest {
    agreementProductFilter?: AgreementProductFilter;
}

export interface AgreementProductsGetRequest {
    agreementTypeIds?: Array<AgreementType> | null;
    page?: number;
    pageSize?: number;
    search?: string | null;
    priceListId?: number;
    organizationId?: number;
    customerTenantId?: number;
    agreementId?: number;
    isTrial?: boolean | null;
    agreementIds?: Array<number> | null;
    searchDate?: Date | null;
    includePartNumbers?: Array<string> | null;
    includePublisherIds?: Array<number> | null;
    includePublisherNames?: Array<string> | null;
    includePoolNames?: Array<string> | null;
    includeOperatingSystemNames?: Array<string> | null;
    includeLevelNames?: Array<string> | null;
    includeLanguageNames?: Array<string> | null;
    includeLicenseAgreementTypeNames?: Array<string> | null;
    includeLicenseTypeNames?: Array<string> | null;
    includeProductFamilyNames?: Array<string> | null;
    includeProductTypeNames?: Array<string> | null;
    includeProgramNames?: Array<string> | null;
    includeOfferingNames?: Array<string> | null;
    includePurchasePeriodNames?: Array<string> | null;
    includePurchaseUnitNames?: Array<string> | null;
    includeVersionNames?: Array<string> | null;
    includeRegionNames?: Array<string> | null;
    includeProductCategoryNames?: Array<string> | null;
    includeCatalogNames?: Array<string> | null;
    includeBillingCycles?: Array<string> | null;
    excludePartNumbers?: Array<string> | null;
    excludePublisherIds?: Array<number> | null;
    excludePublisherNames?: Array<string> | null;
    excludePoolNames?: Array<string> | null;
    excludeOperatingSystemNames?: Array<string> | null;
    excludeLevelNames?: Array<string> | null;
    excludeLanguageNames?: Array<string> | null;
    excludeLicenseAgreementTypeNames?: Array<string> | null;
    excludeLicenseTypeNames?: Array<string> | null;
    excludeProductFamilyNames?: Array<string> | null;
    excludeProductTypeNames?: Array<string> | null;
    excludeProgramNames?: Array<string> | null;
    excludeOfferingNames?: Array<string> | null;
    excludePurchasePeriodNames?: Array<string> | null;
    excludePurchaseUnitNames?: Array<string> | null;
    excludeVersionNames?: Array<string> | null;
    excludeRegionNames?: Array<string> | null;
    excludeProductCategoryNames?: Array<string> | null;
    excludeCatalogNames?: Array<string> | null;
    excludeBillingCycles?: Array<string> | null;
    sortKey?: string | null;
    includeProductInformation?: boolean;
    sortOrder?: SortOrder;
}

export interface AgreementProductsPartNumberSupportedbillingcyclesGetRequest {
    partNumber: string | null;
    resellerCustomerId?: number;
}

export interface AgreementProductsPostRequest {
    agreementProductFilter?: AgreementProductFilter;
}

/**
 * 
 */
export class AgreementProductsApi extends runtime.BaseAPI {

    /**
     */
    async agreementProductsFileXlsxPostRaw(requestParameters: AgreementProductsFileXlsxPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/AgreementProducts/file/xlsx`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgreementProductFilterToJSON(requestParameters.agreementProductFilter),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async agreementProductsFileXlsxPost(requestParameters: AgreementProductsFileXlsxPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.agreementProductsFileXlsxPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async agreementProductsGetRaw(requestParameters: AgreementProductsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AgreementProduct>>> {
        const queryParameters: any = {};

        if (requestParameters.agreementTypeIds) {
            queryParameters['AgreementTypeIds'] = requestParameters.agreementTypeIds;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.priceListId !== undefined) {
            queryParameters['PriceListId'] = requestParameters.priceListId;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['OrganizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.customerTenantId !== undefined) {
            queryParameters['CustomerTenantId'] = requestParameters.customerTenantId;
        }

        if (requestParameters.agreementId !== undefined) {
            queryParameters['AgreementId'] = requestParameters.agreementId;
        }

        if (requestParameters.isTrial !== undefined) {
            queryParameters['IsTrial'] = requestParameters.isTrial;
        }

        if (requestParameters.agreementIds) {
            queryParameters['AgreementIds'] = requestParameters.agreementIds;
        }

        if (requestParameters.searchDate !== undefined) {
            queryParameters['SearchDate'] = (requestParameters.searchDate as any).toISOString();
        }

        if (requestParameters.includePartNumbers) {
            queryParameters['Include.PartNumbers'] = requestParameters.includePartNumbers;
        }

        if (requestParameters.includePublisherIds) {
            queryParameters['Include.PublisherIds'] = requestParameters.includePublisherIds;
        }

        if (requestParameters.includePublisherNames) {
            queryParameters['Include.PublisherNames'] = requestParameters.includePublisherNames;
        }

        if (requestParameters.includePoolNames) {
            queryParameters['Include.PoolNames'] = requestParameters.includePoolNames;
        }

        if (requestParameters.includeOperatingSystemNames) {
            queryParameters['Include.OperatingSystemNames'] = requestParameters.includeOperatingSystemNames;
        }

        if (requestParameters.includeLevelNames) {
            queryParameters['Include.LevelNames'] = requestParameters.includeLevelNames;
        }

        if (requestParameters.includeLanguageNames) {
            queryParameters['Include.LanguageNames'] = requestParameters.includeLanguageNames;
        }

        if (requestParameters.includeLicenseAgreementTypeNames) {
            queryParameters['Include.LicenseAgreementTypeNames'] = requestParameters.includeLicenseAgreementTypeNames;
        }

        if (requestParameters.includeLicenseTypeNames) {
            queryParameters['Include.LicenseTypeNames'] = requestParameters.includeLicenseTypeNames;
        }

        if (requestParameters.includeProductFamilyNames) {
            queryParameters['Include.ProductFamilyNames'] = requestParameters.includeProductFamilyNames;
        }

        if (requestParameters.includeProductTypeNames) {
            queryParameters['Include.ProductTypeNames'] = requestParameters.includeProductTypeNames;
        }

        if (requestParameters.includeProgramNames) {
            queryParameters['Include.ProgramNames'] = requestParameters.includeProgramNames;
        }

        if (requestParameters.includeOfferingNames) {
            queryParameters['Include.OfferingNames'] = requestParameters.includeOfferingNames;
        }

        if (requestParameters.includePurchasePeriodNames) {
            queryParameters['Include.PurchasePeriodNames'] = requestParameters.includePurchasePeriodNames;
        }

        if (requestParameters.includePurchaseUnitNames) {
            queryParameters['Include.PurchaseUnitNames'] = requestParameters.includePurchaseUnitNames;
        }

        if (requestParameters.includeVersionNames) {
            queryParameters['Include.VersionNames'] = requestParameters.includeVersionNames;
        }

        if (requestParameters.includeRegionNames) {
            queryParameters['Include.RegionNames'] = requestParameters.includeRegionNames;
        }

        if (requestParameters.includeProductCategoryNames) {
            queryParameters['Include.ProductCategoryNames'] = requestParameters.includeProductCategoryNames;
        }

        if (requestParameters.includeCatalogNames) {
            queryParameters['Include.CatalogNames'] = requestParameters.includeCatalogNames;
        }

        if (requestParameters.includeBillingCycles) {
            queryParameters['Include.BillingCycles'] = requestParameters.includeBillingCycles;
        }

        if (requestParameters.excludePartNumbers) {
            queryParameters['Exclude.PartNumbers'] = requestParameters.excludePartNumbers;
        }

        if (requestParameters.excludePublisherIds) {
            queryParameters['Exclude.PublisherIds'] = requestParameters.excludePublisherIds;
        }

        if (requestParameters.excludePublisherNames) {
            queryParameters['Exclude.PublisherNames'] = requestParameters.excludePublisherNames;
        }

        if (requestParameters.excludePoolNames) {
            queryParameters['Exclude.PoolNames'] = requestParameters.excludePoolNames;
        }

        if (requestParameters.excludeOperatingSystemNames) {
            queryParameters['Exclude.OperatingSystemNames'] = requestParameters.excludeOperatingSystemNames;
        }

        if (requestParameters.excludeLevelNames) {
            queryParameters['Exclude.LevelNames'] = requestParameters.excludeLevelNames;
        }

        if (requestParameters.excludeLanguageNames) {
            queryParameters['Exclude.LanguageNames'] = requestParameters.excludeLanguageNames;
        }

        if (requestParameters.excludeLicenseAgreementTypeNames) {
            queryParameters['Exclude.LicenseAgreementTypeNames'] = requestParameters.excludeLicenseAgreementTypeNames;
        }

        if (requestParameters.excludeLicenseTypeNames) {
            queryParameters['Exclude.LicenseTypeNames'] = requestParameters.excludeLicenseTypeNames;
        }

        if (requestParameters.excludeProductFamilyNames) {
            queryParameters['Exclude.ProductFamilyNames'] = requestParameters.excludeProductFamilyNames;
        }

        if (requestParameters.excludeProductTypeNames) {
            queryParameters['Exclude.ProductTypeNames'] = requestParameters.excludeProductTypeNames;
        }

        if (requestParameters.excludeProgramNames) {
            queryParameters['Exclude.ProgramNames'] = requestParameters.excludeProgramNames;
        }

        if (requestParameters.excludeOfferingNames) {
            queryParameters['Exclude.OfferingNames'] = requestParameters.excludeOfferingNames;
        }

        if (requestParameters.excludePurchasePeriodNames) {
            queryParameters['Exclude.PurchasePeriodNames'] = requestParameters.excludePurchasePeriodNames;
        }

        if (requestParameters.excludePurchaseUnitNames) {
            queryParameters['Exclude.PurchaseUnitNames'] = requestParameters.excludePurchaseUnitNames;
        }

        if (requestParameters.excludeVersionNames) {
            queryParameters['Exclude.VersionNames'] = requestParameters.excludeVersionNames;
        }

        if (requestParameters.excludeRegionNames) {
            queryParameters['Exclude.RegionNames'] = requestParameters.excludeRegionNames;
        }

        if (requestParameters.excludeProductCategoryNames) {
            queryParameters['Exclude.ProductCategoryNames'] = requestParameters.excludeProductCategoryNames;
        }

        if (requestParameters.excludeCatalogNames) {
            queryParameters['Exclude.CatalogNames'] = requestParameters.excludeCatalogNames;
        }

        if (requestParameters.excludeBillingCycles) {
            queryParameters['Exclude.BillingCycles'] = requestParameters.excludeBillingCycles;
        }

        if (requestParameters.sortKey !== undefined) {
            queryParameters['SortKey'] = requestParameters.sortKey;
        }

        if (requestParameters.includeProductInformation !== undefined) {
            queryParameters['IncludeProductInformation'] = requestParameters.includeProductInformation;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['SortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/AgreementProducts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgreementProductFromJSON));
    }

    /**
     */
    async agreementProductsGet(requestParameters: AgreementProductsGetRequest, initOverrides?: RequestInit): Promise<Array<AgreementProduct>> {
        const response = await this.agreementProductsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agreementProductsPartNumberSupportedbillingcyclesGetRaw(requestParameters: AgreementProductsPartNumberSupportedbillingcyclesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<BillingCycleEnum>>> {
        if (requestParameters.partNumber === null || requestParameters.partNumber === undefined) {
            throw new runtime.RequiredError('partNumber','Required parameter requestParameters.partNumber was null or undefined when calling agreementProductsPartNumberSupportedbillingcyclesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.resellerCustomerId !== undefined) {
            queryParameters['resellerCustomerId'] = requestParameters.resellerCustomerId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/AgreementProducts/{partNumber}/supportedbillingcycles`.replace(`{${"partNumber"}}`, encodeURIComponent(String(requestParameters.partNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BillingCycleEnumFromJSON));
    }

    /**
     */
    async agreementProductsPartNumberSupportedbillingcyclesGet(requestParameters: AgreementProductsPartNumberSupportedbillingcyclesGetRequest, initOverrides?: RequestInit): Promise<Array<BillingCycleEnum>> {
        const response = await this.agreementProductsPartNumberSupportedbillingcyclesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async agreementProductsPostRaw(requestParameters: AgreementProductsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AgreementProduct>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/AgreementProducts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AgreementProductFilterToJSON(requestParameters.agreementProductFilter),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AgreementProductFromJSON));
    }

    /**
     */
    async agreementProductsPost(requestParameters: AgreementProductsPostRequest, initOverrides?: RequestInit): Promise<Array<AgreementProduct>> {
        const response = await this.agreementProductsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
