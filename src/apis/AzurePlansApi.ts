/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AzurePlan,
    AzurePlanFromJSON,
    AzurePlanToJSON,
    AzureSubscription,
    AzureSubscriptionFromJSON,
    AzureSubscriptionToJSON,
    AzureSubscriptionAssignAdmin,
    AzureSubscriptionAssignAdminFromJSON,
    AzureSubscriptionAssignAdminToJSON,
    AzureSubscriptionRename,
    AzureSubscriptionRenameFromJSON,
    AzureSubscriptionRenameToJSON,
    AzureSubscriptionUpdated,
    AzureSubscriptionUpdatedFromJSON,
    AzureSubscriptionUpdatedToJSON,
    CreateAzureSubscriptionRequest,
    CreateAzureSubscriptionRequestFromJSON,
    CreateAzureSubscriptionRequestToJSON,
    PutAzureSubscription,
    PutAzureSubscriptionFromJSON,
    PutAzureSubscriptionToJSON,
} from '../models';

export interface ApiV1AzurePlansAzurePlanIdAzureSubscriptionsGetRequest {
    azurePlanId: number;
    search?: string | null;
    page?: number;
    pageSize?: number;
}

export interface ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdAssignUniqueAdminPutRequest {
    azurePlanId: number;
    id: number;
    azureSubscriptionAssignAdmin?: AzureSubscriptionAssignAdmin;
}

export interface ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdCancelPostRequest {
    azurePlanId: number;
    id: number;
}

export interface ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdEnablePostRequest {
    azurePlanId: number;
    id: number;
}

export interface ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdGetRequest {
    azurePlanId: number;
    id: number;
}

export interface ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdPutRequest {
    azurePlanId: number;
    id: number;
    putAzureSubscription?: PutAzureSubscription;
}

export interface ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdRenamePatchRequest {
    azurePlanId: number;
    id: number;
    azureSubscriptionRename?: AzureSubscriptionRename;
}

export interface ApiV1AzurePlansAzurePlanIdAzureSubscriptionsPostRequest {
    azurePlanId: number;
    createAzureSubscriptionRequest?: CreateAzureSubscriptionRequest;
}

export interface ApiV1AzurePlansAzurePlanIdGetRequest {
    azurePlanId: number;
}

/**
 * 
 */
export class AzurePlansApi extends runtime.BaseAPI {

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsGetRaw(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AzureSubscription>>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AzureSubscriptionFromJSON));
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsGet(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsGetRequest, initOverrides?: RequestInit): Promise<Array<AzureSubscription>> {
        const response = await this.apiV1AzurePlansAzurePlanIdAzureSubscriptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdAssignUniqueAdminPutRaw(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdAssignUniqueAdminPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdAssignUniqueAdminPut.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdAssignUniqueAdminPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/assign-unique-admin`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AzureSubscriptionAssignAdminToJSON(requestParameters.azureSubscriptionAssignAdmin),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdAssignUniqueAdminPut(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdAssignUniqueAdminPutRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdAssignUniqueAdminPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdCancelPostRaw(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdCancelPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AzureSubscriptionUpdated>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdCancelPost.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdCancelPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/cancel`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzureSubscriptionUpdatedFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdCancelPost(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdCancelPostRequest, initOverrides?: RequestInit): Promise<AzureSubscriptionUpdated> {
        const response = await this.apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdCancelPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdEnablePostRaw(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdEnablePostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AzureSubscriptionUpdated>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdEnablePost.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdEnablePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/enable`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzureSubscriptionUpdatedFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdEnablePost(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdEnablePostRequest, initOverrides?: RequestInit): Promise<AzureSubscriptionUpdated> {
        const response = await this.apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdEnablePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdGetRaw(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AzureSubscription>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzureSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdGet(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdGetRequest, initOverrides?: RequestInit): Promise<AzureSubscription> {
        const response = await this.apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdPutRaw(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AzureSubscription>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdPut.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutAzureSubscriptionToJSON(requestParameters.putAzureSubscription),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzureSubscriptionFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdPut(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdPutRequest, initOverrides?: RequestInit): Promise<AzureSubscription> {
        const response = await this.apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdRenamePatchRaw(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdRenamePatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AzureSubscriptionUpdated>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdRenamePatch.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdRenamePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/rename`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AzureSubscriptionRenameToJSON(requestParameters.azureSubscriptionRename),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzureSubscriptionUpdatedFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdRenamePatch(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsIdRenamePatchRequest, initOverrides?: RequestInit): Promise<AzureSubscriptionUpdated> {
        const response = await this.apiV1AzurePlansAzurePlanIdAzureSubscriptionsIdRenamePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsPostRaw(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdAzureSubscriptionsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAzureSubscriptionRequestToJSON(requestParameters.createAzureSubscriptionRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdAzureSubscriptionsPost(requestParameters: ApiV1AzurePlansAzurePlanIdAzureSubscriptionsPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.apiV1AzurePlansAzurePlanIdAzureSubscriptionsPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdGetRaw(requestParameters: ApiV1AzurePlansAzurePlanIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AzurePlan>> {
        if (requestParameters.azurePlanId === null || requestParameters.azurePlanId === undefined) {
            throw new runtime.RequiredError('azurePlanId','Required parameter requestParameters.azurePlanId was null or undefined when calling apiV1AzurePlansAzurePlanIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/AzurePlans/{azurePlanId}`.replace(`{${"azurePlanId"}}`, encodeURIComponent(String(requestParameters.azurePlanId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AzurePlanFromJSON(jsonValue));
    }

    /**
     */
    async apiV1AzurePlansAzurePlanIdGet(requestParameters: ApiV1AzurePlansAzurePlanIdGetRequest, initOverrides?: RequestInit): Promise<AzurePlan> {
        const response = await this.apiV1AzurePlansAzurePlanIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
