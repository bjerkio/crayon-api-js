/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  AzurePlan,
  AzurePlanFromJSON,
  AzurePlanToJSON,
  AzureSubscription,
  AzureSubscriptionFromJSON,
  AzureSubscriptionToJSON,
  AzureSubscriptionAssignAdmin,
  AzureSubscriptionAssignAdminFromJSON,
  AzureSubscriptionAssignAdminToJSON,
  AzureSubscriptionRename,
  AzureSubscriptionRenameFromJSON,
  AzureSubscriptionRenameToJSON,
  AzureSubscriptionUpdated,
  AzureSubscriptionUpdatedFromJSON,
  AzureSubscriptionUpdatedToJSON,
  CreateAzureSubscriptionRequest,
  CreateAzureSubscriptionRequestFromJSON,
  CreateAzureSubscriptionRequestToJSON,
  PutAzureSubscription,
  PutAzureSubscriptionFromJSON,
  PutAzureSubscriptionToJSON,
} from '../models';

export interface AssignUniqueAdminAzureSubscriptionRequest {
  azurePlanId: number;
  id: number;
  azureSubscriptionAssignAdmin?: AzureSubscriptionAssignAdmin;
}

export interface CancelAzureSubscriptionRequest {
  azurePlanId: number;
  id: number;
}

export interface CreateAzurePlanSubscriptionRequest {
  azurePlanId: number;
  createAzureSubscriptionRequest?: CreateAzureSubscriptionRequest;
}

export interface EnableAzureSubscriptionRequest {
  azurePlanId: number;
  id: number;
}

export interface GetAzurePlanRequest {
  azurePlanId: number;
}

export interface GetAzurePlanSubscriptioByIdRequest {
  azurePlanId: number;
  id: number;
}

export interface GetAzurePlanSubscriptionsRequest {
  azurePlanId: number;
  search?: string | null;
  page?: number;
  pageSize?: number;
}

export interface RenameAzureSubscriptionRequest {
  azurePlanId: number;
  id: number;
  azureSubscriptionRename?: AzureSubscriptionRename;
}

export interface UpdateAzureSubscriptionRequest {
  azurePlanId: number;
  id: number;
  putAzureSubscription?: PutAzureSubscription;
}

/**
 *
 */
export class AzurePlansApi extends runtime.BaseAPI {
  /**
   */
  async assignUniqueAdminAzureSubscriptionRaw(
    requestParameters: AssignUniqueAdminAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<boolean>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling assignUniqueAdminAzureSubscription.',
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling assignUniqueAdminAzureSubscription.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/assign-unique-admin`
          .replace(
            `{${'azurePlanId'}}`,
            encodeURIComponent(String(requestParameters.azurePlanId)),
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id)),
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: AzureSubscriptionAssignAdminToJSON(
          requestParameters.azureSubscriptionAssignAdmin,
        ),
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async assignUniqueAdminAzureSubscription(
    requestParameters: AssignUniqueAdminAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<boolean> {
    const response = await this.assignUniqueAdminAzureSubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async cancelAzureSubscriptionRaw(
    requestParameters: CancelAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<AzureSubscriptionUpdated>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling cancelAzureSubscription.',
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling cancelAzureSubscription.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/cancel`
          .replace(
            `{${'azurePlanId'}}`,
            encodeURIComponent(String(requestParameters.azurePlanId)),
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id)),
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      AzureSubscriptionUpdatedFromJSON(jsonValue),
    );
  }

  /**
   */
  async cancelAzureSubscription(
    requestParameters: CancelAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<AzureSubscriptionUpdated> {
    const response = await this.cancelAzureSubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async createAzurePlanSubscriptionRaw(
    requestParameters: CreateAzurePlanSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<void>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling createAzurePlanSubscription.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}/azureSubscriptions`.replace(
          `{${'azurePlanId'}}`,
          encodeURIComponent(String(requestParameters.azurePlanId)),
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateAzureSubscriptionRequestToJSON(
          requestParameters.createAzureSubscriptionRequest,
        ),
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async createAzurePlanSubscription(
    requestParameters: CreateAzurePlanSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<void> {
    await this.createAzurePlanSubscriptionRaw(requestParameters, initOverrides);
  }

  /**
   */
  async enableAzureSubscriptionRaw(
    requestParameters: EnableAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<AzureSubscriptionUpdated>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling enableAzureSubscription.',
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling enableAzureSubscription.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/enable`
          .replace(
            `{${'azurePlanId'}}`,
            encodeURIComponent(String(requestParameters.azurePlanId)),
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id)),
          ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      AzureSubscriptionUpdatedFromJSON(jsonValue),
    );
  }

  /**
   */
  async enableAzureSubscription(
    requestParameters: EnableAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<AzureSubscriptionUpdated> {
    const response = await this.enableAzureSubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async getAzurePlanRaw(
    requestParameters: GetAzurePlanRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<AzurePlan>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling getAzurePlan.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}`.replace(
          `{${'azurePlanId'}}`,
          encodeURIComponent(String(requestParameters.azurePlanId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      AzurePlanFromJSON(jsonValue),
    );
  }

  /**
   */
  async getAzurePlan(
    requestParameters: GetAzurePlanRequest,
    initOverrides?: RequestInit,
  ): Promise<AzurePlan> {
    const response = await this.getAzurePlanRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async getAzurePlanSubscriptioByIdRaw(
    requestParameters: GetAzurePlanSubscriptioByIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<AzureSubscription>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling getAzurePlanSubscriptioById.',
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getAzurePlanSubscriptioById.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}/azureSubscriptions/{id}`
          .replace(
            `{${'azurePlanId'}}`,
            encodeURIComponent(String(requestParameters.azurePlanId)),
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id)),
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      AzureSubscriptionFromJSON(jsonValue),
    );
  }

  /**
   */
  async getAzurePlanSubscriptioById(
    requestParameters: GetAzurePlanSubscriptioByIdRequest,
    initOverrides?: RequestInit,
  ): Promise<AzureSubscription> {
    const response = await this.getAzurePlanSubscriptioByIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async getAzurePlanSubscriptionsRaw(
    requestParameters: GetAzurePlanSubscriptionsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<AzureSubscription>>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling getAzurePlanSubscriptions.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.search !== undefined) {
      queryParameters['Search'] = requestParameters.search;
    }

    if (requestParameters.page !== undefined) {
      queryParameters['Page'] = requestParameters.page;
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['PageSize'] = requestParameters.pageSize;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}/azureSubscriptions`.replace(
          `{${'azurePlanId'}}`,
          encodeURIComponent(String(requestParameters.azurePlanId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(AzureSubscriptionFromJSON),
    );
  }

  /**
   */
  async getAzurePlanSubscriptions(
    requestParameters: GetAzurePlanSubscriptionsRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<AzureSubscription>> {
    const response = await this.getAzurePlanSubscriptionsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async renameAzureSubscriptionRaw(
    requestParameters: RenameAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<AzureSubscriptionUpdated>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling renameAzureSubscription.',
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling renameAzureSubscription.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/rename`
          .replace(
            `{${'azurePlanId'}}`,
            encodeURIComponent(String(requestParameters.azurePlanId)),
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id)),
          ),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: AzureSubscriptionRenameToJSON(
          requestParameters.azureSubscriptionRename,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      AzureSubscriptionUpdatedFromJSON(jsonValue),
    );
  }

  /**
   */
  async renameAzureSubscription(
    requestParameters: RenameAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<AzureSubscriptionUpdated> {
    const response = await this.renameAzureSubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async updateAzureSubscriptionRaw(
    requestParameters: UpdateAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<AzureSubscription>> {
    if (
      requestParameters.azurePlanId === null ||
      requestParameters.azurePlanId === undefined
    ) {
      throw new runtime.RequiredError(
        'azurePlanId',
        'Required parameter requestParameters.azurePlanId was null or undefined when calling updateAzureSubscription.',
      );
    }

    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling updateAzureSubscription.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/AzurePlans/{azurePlanId}/azureSubscriptions/{id}`
          .replace(
            `{${'azurePlanId'}}`,
            encodeURIComponent(String(requestParameters.azurePlanId)),
          )
          .replace(
            `{${'id'}}`,
            encodeURIComponent(String(requestParameters.id)),
          ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: PutAzureSubscriptionToJSON(
          requestParameters.putAzureSubscription,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      AzureSubscriptionFromJSON(jsonValue),
    );
  }

  /**
   */
  async updateAzureSubscription(
    requestParameters: UpdateAzureSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<AzureSubscription> {
    const response = await this.updateAzureSubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
