/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivationLink,
    ActivationLinkFromJSON,
    ActivationLinkToJSON,
    ObjectReference,
    ObjectReferenceFromJSON,
    ObjectReferenceToJSON,
    PostSubscriptionAddOn,
    PostSubscriptionAddOnFromJSON,
    PostSubscriptionAddOnToJSON,
    SortOrder,
    SortOrderFromJSON,
    SortOrderToJSON,
    Subscription,
    SubscriptionFromJSON,
    SubscriptionToJSON,
    SubscriptionAddOnOffer,
    SubscriptionAddOnOfferFromJSON,
    SubscriptionAddOnOfferToJSON,
    SubscriptionConversion,
    SubscriptionConversionFromJSON,
    SubscriptionConversionToJSON,
    SubscriptionDetailed,
    SubscriptionDetailedFromJSON,
    SubscriptionDetailedToJSON,
    SubscriptionSortBy,
    SubscriptionSortByFromJSON,
    SubscriptionSortByToJSON,
    SubscriptionStatus,
    SubscriptionStatusFromJSON,
    SubscriptionStatusToJSON,
    SubscriptionTags,
    SubscriptionTagsFromJSON,
    SubscriptionTagsToJSON,
    SubscriptionTransition,
    SubscriptionTransitionFromJSON,
    SubscriptionTransitionToJSON,
    SubscriptionTransitionEligibility,
    SubscriptionTransitionEligibilityFromJSON,
    SubscriptionTransitionEligibilityToJSON,
    SubscriptionTransitionResponse,
    SubscriptionTransitionResponseFromJSON,
    SubscriptionTransitionResponseToJSON,
} from '../models';

export interface SubscriptionsGetRequest {
    organizationId?: number;
    customerTenantId?: number;
    publisherId?: number;
    refresh?: boolean;
    statuses?: SubscriptionStatus;
    isTrial?: boolean | null;
    page?: number;
    pageSize?: number;
    search?: string | null;
    registeredForReservedInstance?: boolean | null;
    sortBy?: SubscriptionSortBy;
    sortOrder?: SortOrder;
}

export interface SubscriptionsIdActivationlinkGetRequest {
    id: number;
}

export interface SubscriptionsIdGetRequest {
    id: number;
}

export interface SubscriptionsIdPutRequest {
    id: number;
    subscriptionDetailed?: SubscriptionDetailed;
}

export interface SubscriptionsIdTransitionEligibilitiesGetRequest {
    id: number;
}

export interface SubscriptionsIdTransitionPostRequest {
    id: number;
    subscriptionTransition?: SubscriptionTransition;
}

export interface SubscriptionsPostRequest {
    subscriptionDetailed?: SubscriptionDetailed;
}

export interface SubscriptionsReservedInstanceSubscriptionIdIdGetRequest {
    id: number;
    reservedInstance: boolean;
}

export interface SubscriptionsReservedInstanceSubscriptionIdIdPostRequest {
    id: number;
    reservedInstance: boolean;
}

export interface SubscriptionsSubscriptionIdAddonOffersGetRequest {
    subscriptionId: number;
}

export interface SubscriptionsSubscriptionIdAddonsPostRequest {
    subscriptionId: number;
    postSubscriptionAddOn?: PostSubscriptionAddOn;
}

export interface SubscriptionsSubscriptionIdConversionsGetRequest {
    subscriptionId: number;
}

export interface SubscriptionsSubscriptionIdConversionsPostRequest {
    subscriptionId: number;
    subscriptionConversion?: SubscriptionConversion;
}

export interface SubscriptionsSubscriptionIdTagsDeleteRequest {
    subscriptionId: number;
}

export interface SubscriptionsSubscriptionIdTagsGetRequest {
    subscriptionId: number;
}

export interface SubscriptionsSubscriptionIdTagsPostRequest {
    subscriptionId: string;
    subscriptionTags?: SubscriptionTags;
}

/**
 * 
 */
export class SubscriptionsApi extends runtime.BaseAPI {

    /**
     */
    async subscriptionsGetRaw(requestParameters: SubscriptionsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Subscription>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['OrganizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.customerTenantId !== undefined) {
            queryParameters['CustomerTenantId'] = requestParameters.customerTenantId;
        }

        if (requestParameters.publisherId !== undefined) {
            queryParameters['PublisherId'] = requestParameters.publisherId;
        }

        if (requestParameters.refresh !== undefined) {
            queryParameters['Refresh'] = requestParameters.refresh;
        }

        if (requestParameters.statuses !== undefined) {
            queryParameters['Statuses'] = requestParameters.statuses;
        }

        if (requestParameters.isTrial !== undefined) {
            queryParameters['IsTrial'] = requestParameters.isTrial;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.registeredForReservedInstance !== undefined) {
            queryParameters['RegisteredForReservedInstance'] = requestParameters.registeredForReservedInstance;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['SortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.sortOrder !== undefined) {
            queryParameters['SortOrder'] = requestParameters.sortOrder;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionFromJSON));
    }

    /**
     */
    async subscriptionsGet(requestParameters: SubscriptionsGetRequest, initOverrides?: RequestInit): Promise<Array<Subscription>> {
        const response = await this.subscriptionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsIdActivationlinkGetRaw(requestParameters: SubscriptionsIdActivationlinkGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ActivationLink>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsIdActivationlinkGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{id}/activationlink`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivationLinkFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsIdActivationlinkGet(requestParameters: SubscriptionsIdActivationlinkGetRequest, initOverrides?: RequestInit): Promise<ActivationLink> {
        const response = await this.subscriptionsIdActivationlinkGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsIdGetRaw(requestParameters: SubscriptionsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SubscriptionDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionDetailedFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsIdGet(requestParameters: SubscriptionsIdGetRequest, initOverrides?: RequestInit): Promise<SubscriptionDetailed> {
        const response = await this.subscriptionsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsIdPutRaw(requestParameters: SubscriptionsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SubscriptionDetailed>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionDetailedToJSON(requestParameters.subscriptionDetailed),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionDetailedFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsIdPut(requestParameters: SubscriptionsIdPutRequest, initOverrides?: RequestInit): Promise<SubscriptionDetailed> {
        const response = await this.subscriptionsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsIdTransitionEligibilitiesGetRaw(requestParameters: SubscriptionsIdTransitionEligibilitiesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SubscriptionTransitionEligibility>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsIdTransitionEligibilitiesGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{id}/transition-eligibilities`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionTransitionEligibilityFromJSON));
    }

    /**
     */
    async subscriptionsIdTransitionEligibilitiesGet(requestParameters: SubscriptionsIdTransitionEligibilitiesGetRequest, initOverrides?: RequestInit): Promise<Array<SubscriptionTransitionEligibility>> {
        const response = await this.subscriptionsIdTransitionEligibilitiesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsIdTransitionPostRaw(requestParameters: SubscriptionsIdTransitionPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SubscriptionTransitionResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsIdTransitionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{id}/transition`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionTransitionToJSON(requestParameters.subscriptionTransition),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionTransitionResponseFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsIdTransitionPost(requestParameters: SubscriptionsIdTransitionPostRequest, initOverrides?: RequestInit): Promise<SubscriptionTransitionResponse> {
        const response = await this.subscriptionsIdTransitionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsPostRaw(requestParameters: SubscriptionsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SubscriptionDetailed>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionDetailedToJSON(requestParameters.subscriptionDetailed),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionDetailedFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsPost(requestParameters: SubscriptionsPostRequest, initOverrides?: RequestInit): Promise<SubscriptionDetailed> {
        const response = await this.subscriptionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsReservedInstanceSubscriptionIdIdGetRaw(requestParameters: SubscriptionsReservedInstanceSubscriptionIdIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<boolean>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsReservedInstanceSubscriptionIdIdGet.');
        }

        if (requestParameters.reservedInstance === null || requestParameters.reservedInstance === undefined) {
            throw new runtime.RequiredError('reservedInstance','Required parameter requestParameters.reservedInstance was null or undefined when calling subscriptionsReservedInstanceSubscriptionIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{reservedInstance}/subscriptionId/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"reservedInstance"}}`, encodeURIComponent(String(requestParameters.reservedInstance))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async subscriptionsReservedInstanceSubscriptionIdIdGet(requestParameters: SubscriptionsReservedInstanceSubscriptionIdIdGetRequest, initOverrides?: RequestInit): Promise<Array<boolean>> {
        const response = await this.subscriptionsReservedInstanceSubscriptionIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsReservedInstanceSubscriptionIdIdPostRaw(requestParameters: SubscriptionsReservedInstanceSubscriptionIdIdPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling subscriptionsReservedInstanceSubscriptionIdIdPost.');
        }

        if (requestParameters.reservedInstance === null || requestParameters.reservedInstance === undefined) {
            throw new runtime.RequiredError('reservedInstance','Required parameter requestParameters.reservedInstance was null or undefined when calling subscriptionsReservedInstanceSubscriptionIdIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{reservedInstance}/subscriptionId/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"reservedInstance"}}`, encodeURIComponent(String(requestParameters.reservedInstance))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async subscriptionsReservedInstanceSubscriptionIdIdPost(requestParameters: SubscriptionsReservedInstanceSubscriptionIdIdPostRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.subscriptionsReservedInstanceSubscriptionIdIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionIdAddonOffersGetRaw(requestParameters: SubscriptionsSubscriptionIdAddonOffersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SubscriptionAddOnOffer>>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling subscriptionsSubscriptionIdAddonOffersGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{subscriptionId}/addon-offers`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionAddOnOfferFromJSON));
    }

    /**
     */
    async subscriptionsSubscriptionIdAddonOffersGet(requestParameters: SubscriptionsSubscriptionIdAddonOffersGetRequest, initOverrides?: RequestInit): Promise<Array<SubscriptionAddOnOffer>> {
        const response = await this.subscriptionsSubscriptionIdAddonOffersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionIdAddonsPostRaw(requestParameters: SubscriptionsSubscriptionIdAddonsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling subscriptionsSubscriptionIdAddonsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{subscriptionId}/addons`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostSubscriptionAddOnToJSON(requestParameters.postSubscriptionAddOn),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async subscriptionsSubscriptionIdAddonsPost(requestParameters: SubscriptionsSubscriptionIdAddonsPostRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.subscriptionsSubscriptionIdAddonsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionIdConversionsGetRaw(requestParameters: SubscriptionsSubscriptionIdConversionsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SubscriptionConversion>>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling subscriptionsSubscriptionIdConversionsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{subscriptionId}/conversions`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionConversionFromJSON));
    }

    /**
     */
    async subscriptionsSubscriptionIdConversionsGet(requestParameters: SubscriptionsSubscriptionIdConversionsGetRequest, initOverrides?: RequestInit): Promise<Array<SubscriptionConversion>> {
        const response = await this.subscriptionsSubscriptionIdConversionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionIdConversionsPostRaw(requestParameters: SubscriptionsSubscriptionIdConversionsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SubscriptionDetailed>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling subscriptionsSubscriptionIdConversionsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{subscriptionId}/conversions`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionConversionToJSON(requestParameters.subscriptionConversion),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionDetailedFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsSubscriptionIdConversionsPost(requestParameters: SubscriptionsSubscriptionIdConversionsPostRequest, initOverrides?: RequestInit): Promise<SubscriptionDetailed> {
        const response = await this.subscriptionsSubscriptionIdConversionsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionIdTagsDeleteRaw(requestParameters: SubscriptionsSubscriptionIdTagsDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling subscriptionsSubscriptionIdTagsDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{subscriptionId}/tags`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async subscriptionsSubscriptionIdTagsDelete(requestParameters: SubscriptionsSubscriptionIdTagsDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.subscriptionsSubscriptionIdTagsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async subscriptionsSubscriptionIdTagsGetRaw(requestParameters: SubscriptionsSubscriptionIdTagsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SubscriptionTags>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling subscriptionsSubscriptionIdTagsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{subscriptionId}/tags`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SubscriptionTagsFromJSON(jsonValue));
    }

    /**
     */
    async subscriptionsSubscriptionIdTagsGet(requestParameters: SubscriptionsSubscriptionIdTagsGetRequest, initOverrides?: RequestInit): Promise<SubscriptionTags> {
        const response = await this.subscriptionsSubscriptionIdTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionIdTagsPostRaw(requestParameters: SubscriptionsSubscriptionIdTagsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.subscriptionId === null || requestParameters.subscriptionId === undefined) {
            throw new runtime.RequiredError('subscriptionId','Required parameter requestParameters.subscriptionId was null or undefined when calling subscriptionsSubscriptionIdTagsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/{subscriptionId}/tags`.replace(`{${"subscriptionId"}}`, encodeURIComponent(String(requestParameters.subscriptionId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionTagsToJSON(requestParameters.subscriptionTags),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async subscriptionsSubscriptionIdTagsPost(requestParameters: SubscriptionsSubscriptionIdTagsPostRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.subscriptionsSubscriptionIdTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async subscriptionsSubscriptionpricetypesGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ObjectReference>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Subscriptions/subscriptionpricetypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ObjectReferenceFromJSON));
    }

    /**
     */
    async subscriptionsSubscriptionpricetypesGet(initOverrides?: RequestInit): Promise<Array<ObjectReference>> {
        const response = await this.subscriptionsSubscriptionpricetypesGetRaw(initOverrides);
        return await response.value();
    }

}
