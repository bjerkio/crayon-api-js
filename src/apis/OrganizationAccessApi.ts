/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrganizationAccess,
    OrganizationAccessFromJSON,
    OrganizationAccessToJSON,
} from '../models';

export interface OrganizationAccessGetRequest {
    userId?: string | null;
    organizationId?: number;
    page?: number;
    pageSize?: number;
}

export interface OrganizationAccessGrantGetRequest {
    userId?: string | null;
    organizationId?: number;
    page?: number;
    pageSize?: number;
}

export interface OrganizationAccessPutRequest {
    organizationAccess?: Array<OrganizationAccess> | null;
}

/**
 * 
 */
export class OrganizationAccessApi extends runtime.BaseAPI {

    /**
     */
    async organizationAccessGetRaw(requestParameters: OrganizationAccessGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrganizationAccess>>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/OrganizationAccess`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationAccessFromJSON));
    }

    /**
     */
    async organizationAccessGet(requestParameters: OrganizationAccessGetRequest, initOverrides?: RequestInit): Promise<Array<OrganizationAccess>> {
        const response = await this.organizationAccessGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organizationAccessGrantGetRaw(requestParameters: OrganizationAccessGrantGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrganizationAccess>>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['userId'] = requestParameters.userId;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/OrganizationAccess/grant`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationAccessFromJSON));
    }

    /**
     */
    async organizationAccessGrantGet(requestParameters: OrganizationAccessGrantGetRequest, initOverrides?: RequestInit): Promise<Array<OrganizationAccess>> {
        const response = await this.organizationAccessGrantGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organizationAccessPutRaw(requestParameters: OrganizationAccessPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrganizationAccess>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/OrganizationAccess`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.organizationAccess.map(OrganizationAccessToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationAccessFromJSON));
    }

    /**
     */
    async organizationAccessPut(requestParameters: OrganizationAccessPutRequest, initOverrides?: RequestInit): Promise<Array<OrganizationAccess>> {
        const response = await this.organizationAccessPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
