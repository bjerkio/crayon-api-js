/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CategoryUsageCost,
    CategoryUsageCostFromJSON,
    CategoryUsageCostToJSON,
    CategoryUsageCostRequest,
    CategoryUsageCostRequestFromJSON,
    CategoryUsageCostRequestToJSON,
    OrganizationUsageCost,
    OrganizationUsageCostFromJSON,
    OrganizationUsageCostToJSON,
    ResourceGroupUsageCost,
    ResourceGroupUsageCostFromJSON,
    ResourceGroupUsageCostToJSON,
    ResourceGroupUsageCostRequest,
    ResourceGroupUsageCostRequestFromJSON,
    ResourceGroupUsageCostRequestToJSON,
    SubcategoryUsageCost,
    SubcategoryUsageCostFromJSON,
    SubcategoryUsageCostToJSON,
    SubcategoryUsageCostRequest,
    SubcategoryUsageCostRequestFromJSON,
    SubcategoryUsageCostRequestToJSON,
    SubscriptionResourceGroupUsageCost,
    SubscriptionResourceGroupUsageCostFromJSON,
    SubscriptionResourceGroupUsageCostToJSON,
    SubscriptionUsageCost,
    SubscriptionUsageCostFromJSON,
    SubscriptionUsageCostToJSON,
    SubscriptionUsageCostRequest,
    SubscriptionUsageCostRequestFromJSON,
    SubscriptionUsageCostRequestToJSON,
} from '../models';

export interface UsageCostGetForCategoryPostRequest {
    categoryUsageCostRequest?: CategoryUsageCostRequest;
}

export interface UsageCostGetForResourceGroupPostRequest {
    resourceGroupUsageCostRequest?: ResourceGroupUsageCostRequest;
}

export interface UsageCostGetForSubcategoryPostRequest {
    subcategoryUsageCostRequest?: SubcategoryUsageCostRequest;
}

export interface UsageCostGetForSubscriptionPostRequest {
    subscriptionUsageCostRequest?: SubscriptionUsageCostRequest;
}

export interface UsageCostGetForSubscriptionResourceGroupsPostRequest {
    subscriptionUsageCostRequest?: SubscriptionUsageCostRequest;
}

export interface UsageCostOrganizationOrganizationIdGetRequest {
    organizationId: number;
    from?: Date;
    to?: Date;
}

/**
 * 
 */
export class UsageCostApi extends runtime.BaseAPI {

    /**
     */
    async usageCostGetForCategoryPostRaw(requestParameters: UsageCostGetForCategoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<CategoryUsageCost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/UsageCost/getForCategory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CategoryUsageCostRequestToJSON(requestParameters.categoryUsageCostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CategoryUsageCostFromJSON));
    }

    /**
     */
    async usageCostGetForCategoryPost(requestParameters: UsageCostGetForCategoryPostRequest, initOverrides?: RequestInit): Promise<Array<CategoryUsageCost>> {
        const response = await this.usageCostGetForCategoryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usageCostGetForResourceGroupPostRaw(requestParameters: UsageCostGetForResourceGroupPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ResourceGroupUsageCost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/UsageCost/getForResourceGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResourceGroupUsageCostRequestToJSON(requestParameters.resourceGroupUsageCostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResourceGroupUsageCostFromJSON));
    }

    /**
     */
    async usageCostGetForResourceGroupPost(requestParameters: UsageCostGetForResourceGroupPostRequest, initOverrides?: RequestInit): Promise<Array<ResourceGroupUsageCost>> {
        const response = await this.usageCostGetForResourceGroupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usageCostGetForSubcategoryPostRaw(requestParameters: UsageCostGetForSubcategoryPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SubcategoryUsageCost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/UsageCost/getForSubcategory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubcategoryUsageCostRequestToJSON(requestParameters.subcategoryUsageCostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubcategoryUsageCostFromJSON));
    }

    /**
     */
    async usageCostGetForSubcategoryPost(requestParameters: UsageCostGetForSubcategoryPostRequest, initOverrides?: RequestInit): Promise<Array<SubcategoryUsageCost>> {
        const response = await this.usageCostGetForSubcategoryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usageCostGetForSubscriptionPostRaw(requestParameters: UsageCostGetForSubscriptionPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SubscriptionUsageCost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/UsageCost/getForSubscription`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionUsageCostRequestToJSON(requestParameters.subscriptionUsageCostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionUsageCostFromJSON));
    }

    /**
     */
    async usageCostGetForSubscriptionPost(requestParameters: UsageCostGetForSubscriptionPostRequest, initOverrides?: RequestInit): Promise<Array<SubscriptionUsageCost>> {
        const response = await this.usageCostGetForSubscriptionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usageCostGetForSubscriptionResourceGroupsPostRaw(requestParameters: UsageCostGetForSubscriptionResourceGroupsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<SubscriptionResourceGroupUsageCost>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/UsageCost/getForSubscription/resourceGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SubscriptionUsageCostRequestToJSON(requestParameters.subscriptionUsageCostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SubscriptionResourceGroupUsageCostFromJSON));
    }

    /**
     */
    async usageCostGetForSubscriptionResourceGroupsPost(requestParameters: UsageCostGetForSubscriptionResourceGroupsPostRequest, initOverrides?: RequestInit): Promise<Array<SubscriptionResourceGroupUsageCost>> {
        const response = await this.usageCostGetForSubscriptionResourceGroupsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async usageCostOrganizationOrganizationIdGetRaw(requestParameters: UsageCostOrganizationOrganizationIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<OrganizationUsageCost>>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling usageCostOrganizationOrganizationIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/UsageCost/organization/{organizationId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationUsageCostFromJSON));
    }

    /**
     */
    async usageCostOrganizationOrganizationIdGet(requestParameters: UsageCostOrganizationOrganizationIdGetRequest, initOverrides?: RequestInit): Promise<Array<OrganizationUsageCost>> {
        const response = await this.usageCostOrganizationOrganizationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
