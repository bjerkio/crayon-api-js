/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CategoryUsageCost,
  CategoryUsageCostFromJSON,
  CategoryUsageCostToJSON,
  CategoryUsageCostRequest,
  CategoryUsageCostRequestFromJSON,
  CategoryUsageCostRequestToJSON,
  OrganizationUsageCost,
  OrganizationUsageCostFromJSON,
  OrganizationUsageCostToJSON,
  ResourceGroupUsageCost,
  ResourceGroupUsageCostFromJSON,
  ResourceGroupUsageCostToJSON,
  ResourceGroupUsageCostRequest,
  ResourceGroupUsageCostRequestFromJSON,
  ResourceGroupUsageCostRequestToJSON,
  SubcategoryUsageCost,
  SubcategoryUsageCostFromJSON,
  SubcategoryUsageCostToJSON,
  SubcategoryUsageCostRequest,
  SubcategoryUsageCostRequestFromJSON,
  SubcategoryUsageCostRequestToJSON,
  SubscriptionResourceGroupUsageCost,
  SubscriptionResourceGroupUsageCostFromJSON,
  SubscriptionResourceGroupUsageCostToJSON,
  SubscriptionUsageCost,
  SubscriptionUsageCostFromJSON,
  SubscriptionUsageCostToJSON,
  SubscriptionUsageCostRequest,
  SubscriptionUsageCostRequestFromJSON,
  SubscriptionUsageCostRequestToJSON,
} from '../models';

export interface CreateUsageCostForCategoryRequest {
  categoryUsageCostRequest?: CategoryUsageCostRequest;
}

export interface CreateUsageCostForResourceGroupRequest {
  resourceGroupUsageCostRequest?: ResourceGroupUsageCostRequest;
}

export interface CreateUsageCostForSubcategoryRequest {
  subcategoryUsageCostRequest?: SubcategoryUsageCostRequest;
}

export interface CreateUsageCostForSubscriptionRequest {
  subscriptionUsageCostRequest?: SubscriptionUsageCostRequest;
}

export interface CreateUsageCostForSubscriptionResourceGroupsRequest {
  subscriptionUsageCostRequest?: SubscriptionUsageCostRequest;
}

export interface GetUsageCostByOrganizationIdRequest {
  organizationId: number;
  from?: Date;
  to?: Date;
}

/**
 *
 */
export class UsageCostApi extends runtime.BaseAPI {
  /**
   */
  async createUsageCostForCategoryRaw(
    requestParameters: CreateUsageCostForCategoryRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<CategoryUsageCost>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/UsageCost/getForCategory`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CategoryUsageCostRequestToJSON(
          requestParameters.categoryUsageCostRequest,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(CategoryUsageCostFromJSON),
    );
  }

  /**
   */
  async createUsageCostForCategory(
    requestParameters: CreateUsageCostForCategoryRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<CategoryUsageCost>> {
    const response = await this.createUsageCostForCategoryRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async createUsageCostForResourceGroupRaw(
    requestParameters: CreateUsageCostForResourceGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<ResourceGroupUsageCost>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/UsageCost/getForResourceGroup`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ResourceGroupUsageCostRequestToJSON(
          requestParameters.resourceGroupUsageCostRequest,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(ResourceGroupUsageCostFromJSON),
    );
  }

  /**
   */
  async createUsageCostForResourceGroup(
    requestParameters: CreateUsageCostForResourceGroupRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<ResourceGroupUsageCost>> {
    const response = await this.createUsageCostForResourceGroupRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async createUsageCostForSubcategoryRaw(
    requestParameters: CreateUsageCostForSubcategoryRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<SubcategoryUsageCost>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/UsageCost/getForSubcategory`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SubcategoryUsageCostRequestToJSON(
          requestParameters.subcategoryUsageCostRequest,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(SubcategoryUsageCostFromJSON),
    );
  }

  /**
   */
  async createUsageCostForSubcategory(
    requestParameters: CreateUsageCostForSubcategoryRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<SubcategoryUsageCost>> {
    const response = await this.createUsageCostForSubcategoryRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async createUsageCostForSubscriptionRaw(
    requestParameters: CreateUsageCostForSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<SubscriptionUsageCost>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/UsageCost/getForSubscription`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SubscriptionUsageCostRequestToJSON(
          requestParameters.subscriptionUsageCostRequest,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(SubscriptionUsageCostFromJSON),
    );
  }

  /**
   */
  async createUsageCostForSubscription(
    requestParameters: CreateUsageCostForSubscriptionRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<SubscriptionUsageCost>> {
    const response = await this.createUsageCostForSubscriptionRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async createUsageCostForSubscriptionResourceGroupsRaw(
    requestParameters: CreateUsageCostForSubscriptionResourceGroupsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<SubscriptionResourceGroupUsageCost>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/UsageCost/getForSubscription/resourceGroups`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: SubscriptionUsageCostRequestToJSON(
          requestParameters.subscriptionUsageCostRequest,
        ),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(SubscriptionResourceGroupUsageCostFromJSON),
    );
  }

  /**
   */
  async createUsageCostForSubscriptionResourceGroups(
    requestParameters: CreateUsageCostForSubscriptionResourceGroupsRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<SubscriptionResourceGroupUsageCost>> {
    const response = await this.createUsageCostForSubscriptionResourceGroupsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async getUsageCostByOrganizationIdRaw(
    requestParameters: GetUsageCostByOrganizationIdRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<OrganizationUsageCost>>> {
    if (
      requestParameters.organizationId === null ||
      requestParameters.organizationId === undefined
    ) {
      throw new runtime.RequiredError(
        'organizationId',
        'Required parameter requestParameters.organizationId was null or undefined when calling getUsageCostByOrganizationId.',
      );
    }

    const queryParameters: any = {};

    if (requestParameters.from !== undefined) {
      queryParameters['from'] = (requestParameters.from as any).toISOString();
    }

    if (requestParameters.to !== undefined) {
      queryParameters['to'] = (requestParameters.to as any).toISOString();
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/UsageCost/organization/{organizationId}`.replace(
          `{${'organizationId'}}`,
          encodeURIComponent(String(requestParameters.organizationId)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(OrganizationUsageCostFromJSON),
    );
  }

  /**
   */
  async getUsageCostByOrganizationId(
    requestParameters: GetUsageCostByOrganizationIdRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<OrganizationUsageCost>> {
    const response = await this.getUsageCostByOrganizationIdRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
