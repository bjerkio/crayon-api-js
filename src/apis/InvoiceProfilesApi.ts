/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  InvoiceProfile,
  InvoiceProfileFromJSON,
  InvoiceProfileToJSON,
} from '../models';

export interface CreateInvoiceProfileRequest {
  invoiceProfile?: InvoiceProfile;
}

export interface DeleteInvoiceProfileRequest {
  id: number;
}

export interface GetInvoiceProfileRequest {
  id: number;
}

export interface ListInvoiceProfilesRequest {
  organizationId?: number;
  page?: number;
  pageSize?: number;
  search?: string | null;
}

export interface UpdateInvoiceProfileRequest {
  id: number;
  invoiceProfile?: InvoiceProfile;
}

/**
 *
 */
export class InvoiceProfilesApi extends runtime.BaseAPI {
  /**
   */
  async createInvoiceProfileRaw(
    requestParameters: CreateInvoiceProfileRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<InvoiceProfile>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/InvoiceProfiles`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: InvoiceProfileToJSON(requestParameters.invoiceProfile),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      InvoiceProfileFromJSON(jsonValue),
    );
  }

  /**
   */
  async createInvoiceProfile(
    requestParameters: CreateInvoiceProfileRequest,
    initOverrides?: RequestInit,
  ): Promise<InvoiceProfile> {
    const response = await this.createInvoiceProfileRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async deleteInvoiceProfileRaw(
    requestParameters: DeleteInvoiceProfileRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<boolean>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling deleteInvoiceProfile.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/InvoiceProfiles/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.TextApiResponse(response) as any;
  }

  /**
   */
  async deleteInvoiceProfile(
    requestParameters: DeleteInvoiceProfileRequest,
    initOverrides?: RequestInit,
  ): Promise<boolean> {
    const response = await this.deleteInvoiceProfileRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async getInvoiceProfileRaw(
    requestParameters: GetInvoiceProfileRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<InvoiceProfile>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling getInvoiceProfile.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/InvoiceProfiles/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      InvoiceProfileFromJSON(jsonValue),
    );
  }

  /**
   */
  async getInvoiceProfile(
    requestParameters: GetInvoiceProfileRequest,
    initOverrides?: RequestInit,
  ): Promise<InvoiceProfile> {
    const response = await this.getInvoiceProfileRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async listInvoiceProfilesRaw(
    requestParameters: ListInvoiceProfilesRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<InvoiceProfile>>> {
    const queryParameters: any = {};

    if (requestParameters.organizationId !== undefined) {
      queryParameters['OrganizationId'] = requestParameters.organizationId;
    }

    if (requestParameters.page !== undefined) {
      queryParameters['Page'] = requestParameters.page;
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['PageSize'] = requestParameters.pageSize;
    }

    if (requestParameters.search !== undefined) {
      queryParameters['Search'] = requestParameters.search;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/InvoiceProfiles`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(InvoiceProfileFromJSON),
    );
  }

  /**
   */
  async listInvoiceProfiles(
    requestParameters: ListInvoiceProfilesRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<InvoiceProfile>> {
    const response = await this.listInvoiceProfilesRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }

  /**
   */
  async updateInvoiceProfileRaw(
    requestParameters: UpdateInvoiceProfileRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<InvoiceProfile>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter requestParameters.id was null or undefined when calling updateInvoiceProfile.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json-patch+json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/InvoiceProfiles/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters.id)),
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: InvoiceProfileToJSON(requestParameters.invoiceProfile),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      InvoiceProfileFromJSON(jsonValue),
    );
  }

  /**
   */
  async updateInvoiceProfile(
    requestParameters: UpdateInvoiceProfileRequest,
    initOverrides?: RequestInit,
  ): Promise<InvoiceProfile> {
    const response = await this.updateInvoiceProfileRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
