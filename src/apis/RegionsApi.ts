/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Region,
    RegionFromJSON,
    RegionToJSON,
    RegionList,
    RegionListFromJSON,
    RegionListToJSON,
} from '../models';

export interface RegionsBycodeGetRequest {
    regionCode?: string | null;
    regionList?: RegionList;
}

export interface RegionsGetRequest {
    regionList?: RegionList;
    organizationId?: number;
    page?: number;
    pageSize?: number;
    search?: string | null;
}

/**
 * 
 */
export class RegionsApi extends runtime.BaseAPI {

    /**
     */
    async regionsBycodeGetRaw(requestParameters: RegionsBycodeGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Region>> {
        const queryParameters: any = {};

        if (requestParameters.regionCode !== undefined) {
            queryParameters['regionCode'] = requestParameters.regionCode;
        }

        if (requestParameters.regionList !== undefined) {
            queryParameters['regionList'] = requestParameters.regionList;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Regions/bycode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RegionFromJSON(jsonValue));
    }

    /**
     */
    async regionsBycodeGet(requestParameters: RegionsBycodeGetRequest, initOverrides?: RequestInit): Promise<Region> {
        const response = await this.regionsBycodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async regionsGetRaw(requestParameters: RegionsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Region>>> {
        const queryParameters: any = {};

        if (requestParameters.regionList !== undefined) {
            queryParameters['RegionList'] = requestParameters.regionList;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['OrganizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegionFromJSON));
    }

    /**
     */
    async regionsGet(requestParameters: RegionsGetRequest, initOverrides?: RequestInit): Promise<Array<Region>> {
        const response = await this.regionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
