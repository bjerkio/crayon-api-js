/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Grouping,
    GroupingFromJSON,
    GroupingToJSON,
} from '../models';

export interface GroupingsGetRequest {
    organizationId?: number;
    includeRemoved?: boolean;
    search?: string | null;
    page?: number;
    pageSize?: number;
}

export interface GroupingsIdDeleteRequest {
    id: number;
}

export interface GroupingsIdGetRequest {
    id: number;
}

export interface GroupingsIdPutRequest {
    id: number;
    grouping?: Grouping;
}

export interface GroupingsPostRequest {
    grouping?: Grouping;
}

/**
 * 
 */
export class GroupingsApi extends runtime.BaseAPI {

    /**
     */
    async groupingsGetRaw(requestParameters: GroupingsGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Grouping>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['OrganizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.includeRemoved !== undefined) {
            queryParameters['IncludeRemoved'] = requestParameters.includeRemoved;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Groupings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GroupingFromJSON));
    }

    /**
     */
    async groupingsGet(requestParameters: GroupingsGetRequest, initOverrides?: RequestInit): Promise<Array<Grouping>> {
        const response = await this.groupingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupingsIdDeleteRaw(requestParameters: GroupingsIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupingsIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Groupings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async groupingsIdDelete(requestParameters: GroupingsIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.groupingsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async groupingsIdGetRaw(requestParameters: GroupingsIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Grouping>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupingsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Groupings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupingFromJSON(jsonValue));
    }

    /**
     */
    async groupingsIdGet(requestParameters: GroupingsIdGetRequest, initOverrides?: RequestInit): Promise<Grouping> {
        const response = await this.groupingsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupingsIdPutRaw(requestParameters: GroupingsIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Grouping>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling groupingsIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Groupings/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupingToJSON(requestParameters.grouping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupingFromJSON(jsonValue));
    }

    /**
     */
    async groupingsIdPut(requestParameters: GroupingsIdPutRequest, initOverrides?: RequestInit): Promise<Grouping> {
        const response = await this.groupingsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async groupingsPostRaw(requestParameters: GroupingsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Grouping>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Groupings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupingToJSON(requestParameters.grouping),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupingFromJSON(jsonValue));
    }

    /**
     */
    async groupingsPost(requestParameters: GroupingsPostRequest, initOverrides?: RequestInit): Promise<Grouping> {
        const response = await this.groupingsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
