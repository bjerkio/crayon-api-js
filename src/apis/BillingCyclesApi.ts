/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BillingCycle,
    BillingCycleFromJSON,
    BillingCycleToJSON,
} from '../models';

export interface ApiV1BillingCyclesGetRequest {
    includeUnknown?: boolean;
}

export interface ApiV1BillingCyclesProductVariantProductVariantIdGetRequest {
    productVariantId: number;
}

/**
 * 
 */
export class BillingCyclesApi extends runtime.BaseAPI {

    /**
     */
    async apiV1BillingCyclesCspNameDictionaryGetRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/BillingCycles/cspNameDictionary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiV1BillingCyclesCspNameDictionaryGet(initOverrides?: RequestInit): Promise<{ [key: string]: string; }> {
        const response = await this.apiV1BillingCyclesCspNameDictionaryGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1BillingCyclesGetRaw(requestParameters: ApiV1BillingCyclesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<BillingCycle>>> {
        const queryParameters: any = {};

        if (requestParameters.includeUnknown !== undefined) {
            queryParameters['includeUnknown'] = requestParameters.includeUnknown;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/BillingCycles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BillingCycleFromJSON));
    }

    /**
     */
    async apiV1BillingCyclesGet(requestParameters: ApiV1BillingCyclesGetRequest, initOverrides?: RequestInit): Promise<Array<BillingCycle>> {
        const response = await this.apiV1BillingCyclesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1BillingCyclesProductVariantProductVariantIdGetRaw(requestParameters: ApiV1BillingCyclesProductVariantProductVariantIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<BillingCycle>>> {
        if (requestParameters.productVariantId === null || requestParameters.productVariantId === undefined) {
            throw new runtime.RequiredError('productVariantId','Required parameter requestParameters.productVariantId was null or undefined when calling apiV1BillingCyclesProductVariantProductVariantIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/BillingCycles/productVariant/{productVariantId}`.replace(`{${"productVariantId"}}`, encodeURIComponent(String(requestParameters.productVariantId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BillingCycleFromJSON));
    }

    /**
     */
    async apiV1BillingCyclesProductVariantProductVariantIdGet(requestParameters: ApiV1BillingCyclesProductVariantProductVariantIdGetRequest, initOverrides?: RequestInit): Promise<Array<BillingCycle>> {
        const response = await this.apiV1BillingCyclesProductVariantProductVariantIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
