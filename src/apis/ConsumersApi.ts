/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Consumer,
    ConsumerFromJSON,
    ConsumerToJSON,
} from '../models';

export interface ConsumersGetRequest {
    organizationId?: number;
    search?: string | null;
    page?: number;
    pageSize?: number;
}

export interface ConsumersIdDeleteRequest {
    id: number;
}

export interface ConsumersIdGetRequest {
    id: number;
}

export interface ConsumersIdPutRequest {
    id: number;
    consumer?: Consumer;
}

export interface ConsumersPostRequest {
    consumer?: Consumer;
}

/**
 * 
 */
export class ConsumersApi extends runtime.BaseAPI {

    /**
     */
    async consumersGetRaw(requestParameters: ConsumersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Consumer>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['OrganizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Consumers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ConsumerFromJSON));
    }

    /**
     */
    async consumersGet(requestParameters: ConsumersGetRequest, initOverrides?: RequestInit): Promise<Array<Consumer>> {
        const response = await this.consumersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async consumersIdDeleteRaw(requestParameters: ConsumersIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling consumersIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Consumers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async consumersIdDelete(requestParameters: ConsumersIdDeleteRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.consumersIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async consumersIdGetRaw(requestParameters: ConsumersIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Consumer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling consumersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Consumers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsumerFromJSON(jsonValue));
    }

    /**
     */
    async consumersIdGet(requestParameters: ConsumersIdGetRequest, initOverrides?: RequestInit): Promise<Consumer> {
        const response = await this.consumersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async consumersIdPutRaw(requestParameters: ConsumersIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Consumer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling consumersIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Consumers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConsumerToJSON(requestParameters.consumer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsumerFromJSON(jsonValue));
    }

    /**
     */
    async consumersIdPut(requestParameters: ConsumersIdPutRequest, initOverrides?: RequestInit): Promise<Consumer> {
        const response = await this.consumersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async consumersPostRaw(requestParameters: ConsumersPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Consumer>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Consumers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsumerToJSON(requestParameters.consumer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsumerFromJSON(jsonValue));
    }

    /**
     */
    async consumersPost(requestParameters: ConsumersPostRequest, initOverrides?: RequestInit): Promise<Consumer> {
        const response = await this.consumersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
