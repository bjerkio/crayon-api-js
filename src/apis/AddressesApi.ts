/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Address,
    AddressFromJSON,
    AddressToJSON,
    AddressType,
    AddressTypeFromJSON,
    AddressTypeToJSON,
} from '../models';

export interface OrganizationsOrganizationIdAddressesGetRequest {
    organizationId: number;
    type?: AddressType;
}

export interface OrganizationsOrganizationIdAddressesIdGetRequest {
    organizationId: number;
    id: number;
}

/**
 * 
 */
export class AddressesApi extends runtime.BaseAPI {

    /**
     */
    async organizationsOrganizationIdAddressesGetRaw(requestParameters: OrganizationsOrganizationIdAddressesGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Address>>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling organizationsOrganizationIdAddressesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/Addresses`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AddressFromJSON));
    }

    /**
     */
    async organizationsOrganizationIdAddressesGet(requestParameters: OrganizationsOrganizationIdAddressesGetRequest, initOverrides?: RequestInit): Promise<Array<Address>> {
        const response = await this.organizationsOrganizationIdAddressesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async organizationsOrganizationIdAddressesIdGetRaw(requestParameters: OrganizationsOrganizationIdAddressesIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Address>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling organizationsOrganizationIdAddressesIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationsOrganizationIdAddressesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/Addresses/{id}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressFromJSON(jsonValue));
    }

    /**
     */
    async organizationsOrganizationIdAddressesIdGet(requestParameters: OrganizationsOrganizationIdAddressesIdGetRequest, initOverrides?: RequestInit): Promise<Address> {
        const response = await this.organizationsOrganizationIdAddressesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
