/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProductContainer,
    ProductContainerFromJSON,
    ProductContainerToJSON,
    ProductContainerCategory,
    ProductContainerCategoryFromJSON,
    ProductContainerCategoryToJSON,
    ProductContainerType,
    ProductContainerTypeFromJSON,
    ProductContainerTypeToJSON,
    ProductRowPatch,
    ProductRowPatchFromJSON,
    ProductRowPatchToJSON,
} from '../models';

export interface ApiV1ProductContainersGetRequest {
    organizationId?: number;
    search?: string | null;
    page?: number;
    pageSize?: number;
    activeDraft?: boolean;
    programId?: number;
    year?: number;
    month?: number;
    userId?: string | null;
    sentByUserId?: string | null;
    type?: ProductContainerType;
    category?: ProductContainerCategory;
    from?: Date | null;
    to?: Date | null;
    includeRemoved?: boolean;
    includeSubsidiaries?: boolean;
}

export interface ApiV1ProductContainersGetorcreateshoppingcartGetRequest {
    organizationId?: number;
}

export interface ApiV1ProductContainersIdDeleteRequest {
    id: number;
}

export interface ApiV1ProductContainersIdGetRequest {
    id: number;
}

export interface ApiV1ProductContainersIdPutRequest {
    id: number;
    requireEulaAnalysis?: boolean | null;
    productContainer?: ProductContainer;
}

export interface ApiV1ProductContainersProductContainerIdRowProductRowIdPatchRequest {
    productContainerId: number;
    productRowId: number;
    productRowPatch?: ProductRowPatch;
}

export interface ApiV1ProductContainersReportbymonthPostRequest {
    year?: number;
    month?: number;
    programId?: number;
    organizationId?: number;
    copyLast?: boolean;
}

export interface ApiV1ProductContainersRowissuesIdGetRequest {
    id: number;
}

/**
 * 
 */
export class ProductContainersApi extends runtime.BaseAPI {

    /**
     */
    async apiV1ProductContainersGetRaw(requestParameters: ApiV1ProductContainersGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ProductContainer>>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['OrganizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.activeDraft !== undefined) {
            queryParameters['ActiveDraft'] = requestParameters.activeDraft;
        }

        if (requestParameters.programId !== undefined) {
            queryParameters['ProgramId'] = requestParameters.programId;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['Year'] = requestParameters.year;
        }

        if (requestParameters.month !== undefined) {
            queryParameters['Month'] = requestParameters.month;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['UserId'] = requestParameters.userId;
        }

        if (requestParameters.sentByUserId !== undefined) {
            queryParameters['SentByUserId'] = requestParameters.sentByUserId;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['Type'] = requestParameters.type;
        }

        if (requestParameters.category !== undefined) {
            queryParameters['Category'] = requestParameters.category;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['From'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['To'] = (requestParameters.to as any).toISOString();
        }

        if (requestParameters.includeRemoved !== undefined) {
            queryParameters['IncludeRemoved'] = requestParameters.includeRemoved;
        }

        if (requestParameters.includeSubsidiaries !== undefined) {
            queryParameters['IncludeSubsidiaries'] = requestParameters.includeSubsidiaries;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/ProductContainers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProductContainerFromJSON));
    }

    /**
     */
    async apiV1ProductContainersGet(requestParameters: ApiV1ProductContainersGetRequest, initOverrides?: RequestInit): Promise<Array<ProductContainer>> {
        const response = await this.apiV1ProductContainersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductContainersGetorcreateshoppingcartGetRaw(requestParameters: ApiV1ProductContainersGetorcreateshoppingcartGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductContainer>> {
        const queryParameters: any = {};

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organizationId'] = requestParameters.organizationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/ProductContainers/getorcreateshoppingcart`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductContainerFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductContainersGetorcreateshoppingcartGet(requestParameters: ApiV1ProductContainersGetorcreateshoppingcartGetRequest, initOverrides?: RequestInit): Promise<ProductContainer> {
        const response = await this.apiV1ProductContainersGetorcreateshoppingcartGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductContainersIdDeleteRaw(requestParameters: ApiV1ProductContainersIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProductContainersIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/ProductContainers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiV1ProductContainersIdDelete(requestParameters: ApiV1ProductContainersIdDeleteRequest, initOverrides?: RequestInit): Promise<boolean> {
        const response = await this.apiV1ProductContainersIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductContainersIdGetRaw(requestParameters: ApiV1ProductContainersIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductContainer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProductContainersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/ProductContainers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductContainerFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductContainersIdGet(requestParameters: ApiV1ProductContainersIdGetRequest, initOverrides?: RequestInit): Promise<ProductContainer> {
        const response = await this.apiV1ProductContainersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductContainersIdPutRaw(requestParameters: ApiV1ProductContainersIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductContainer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProductContainersIdPut.');
        }

        const queryParameters: any = {};

        if (requestParameters.requireEulaAnalysis !== undefined) {
            queryParameters['requireEulaAnalysis'] = requestParameters.requireEulaAnalysis;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/ProductContainers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProductContainerToJSON(requestParameters.productContainer),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductContainerFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductContainersIdPut(requestParameters: ApiV1ProductContainersIdPutRequest, initOverrides?: RequestInit): Promise<ProductContainer> {
        const response = await this.apiV1ProductContainersIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductContainersProductContainerIdRowProductRowIdPatchRaw(requestParameters: ApiV1ProductContainersProductContainerIdRowProductRowIdPatchRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductContainer>> {
        if (requestParameters.productContainerId === null || requestParameters.productContainerId === undefined) {
            throw new runtime.RequiredError('productContainerId','Required parameter requestParameters.productContainerId was null or undefined when calling apiV1ProductContainersProductContainerIdRowProductRowIdPatch.');
        }

        if (requestParameters.productRowId === null || requestParameters.productRowId === undefined) {
            throw new runtime.RequiredError('productRowId','Required parameter requestParameters.productRowId was null or undefined when calling apiV1ProductContainersProductContainerIdRowProductRowIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/ProductContainers/{productContainerId}/row/{productRowId}`.replace(`{${"productContainerId"}}`, encodeURIComponent(String(requestParameters.productContainerId))).replace(`{${"productRowId"}}`, encodeURIComponent(String(requestParameters.productRowId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProductRowPatchToJSON(requestParameters.productRowPatch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductContainerFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductContainersProductContainerIdRowProductRowIdPatch(requestParameters: ApiV1ProductContainersProductContainerIdRowProductRowIdPatchRequest, initOverrides?: RequestInit): Promise<ProductContainer> {
        const response = await this.apiV1ProductContainersProductContainerIdRowProductRowIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductContainersReportbymonthPostRaw(requestParameters: ApiV1ProductContainersReportbymonthPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductContainer>> {
        const queryParameters: any = {};

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.month !== undefined) {
            queryParameters['month'] = requestParameters.month;
        }

        if (requestParameters.programId !== undefined) {
            queryParameters['programId'] = requestParameters.programId;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organizationId'] = requestParameters.organizationId;
        }

        if (requestParameters.copyLast !== undefined) {
            queryParameters['copyLast'] = requestParameters.copyLast;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/ProductContainers/reportbymonth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductContainerFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductContainersReportbymonthPost(requestParameters: ApiV1ProductContainersReportbymonthPostRequest, initOverrides?: RequestInit): Promise<ProductContainer> {
        const response = await this.apiV1ProductContainersReportbymonthPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiV1ProductContainersRowissuesIdGetRaw(requestParameters: ApiV1ProductContainersRowissuesIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProductContainer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV1ProductContainersRowissuesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v1/ProductContainers/rowissues/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProductContainerFromJSON(jsonValue));
    }

    /**
     */
    async apiV1ProductContainersRowissuesIdGet(requestParameters: ApiV1ProductContainersRowissuesIdGetRequest, initOverrides?: RequestInit): Promise<ProductContainer> {
        const response = await this.apiV1ProductContainersRowissuesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
