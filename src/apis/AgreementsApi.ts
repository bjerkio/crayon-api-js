/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  Agreement,
  AgreementFromJSON,
  AgreementToJSON,
  AgreementStatus,
  AgreementStatusFromJSON,
  AgreementStatusToJSON,
  AgreementType,
  AgreementTypeFromJSON,
  AgreementTypeToJSON,
} from '../models';

export interface ListAgreementsRequest {
  organizationId?: number;
  organizationIds?: Array<number> | null;
  pricelistIds?: Array<number> | null;
  status?: AgreementStatus;
  agreementTypes?: Array<AgreementType> | null;
  publisherIds?: Array<number> | null;
  programIds?: Array<number> | null;
  searchDate?: Date | null;
  agreementIds?: Array<number> | null;
  salesPriceCurrency?: string | null;
  termRequired?: boolean;
  publisherId?: number;
  endDateFrom?: Date | null;
  endDateTo?: Date | null;
  page?: number;
  pageSize?: number;
  search?: string | null;
}

/**
 *
 */
export class AgreementsApi extends runtime.BaseAPI {
  /**
   */
  async listAgreementsRaw(
    requestParameters: ListAgreementsRequest,
    initOverrides?: RequestInit,
  ): Promise<runtime.ApiResponse<Array<Agreement>>> {
    const queryParameters: any = {};

    if (requestParameters.organizationId !== undefined) {
      queryParameters['OrganizationId'] = requestParameters.organizationId;
    }

    if (requestParameters.organizationIds) {
      queryParameters['OrganizationIds'] = requestParameters.organizationIds;
    }

    if (requestParameters.pricelistIds) {
      queryParameters['PricelistIds'] = requestParameters.pricelistIds;
    }

    if (requestParameters.status !== undefined) {
      queryParameters['Status'] = requestParameters.status;
    }

    if (requestParameters.agreementTypes) {
      queryParameters['AgreementTypes'] = requestParameters.agreementTypes;
    }

    if (requestParameters.publisherIds) {
      queryParameters['PublisherIds'] = requestParameters.publisherIds;
    }

    if (requestParameters.programIds) {
      queryParameters['ProgramIds'] = requestParameters.programIds;
    }

    if (requestParameters.searchDate !== undefined) {
      queryParameters['SearchDate'] = (
        requestParameters.searchDate as any
      ).toISOString();
    }

    if (requestParameters.agreementIds) {
      queryParameters['AgreementIds'] = requestParameters.agreementIds;
    }

    if (requestParameters.salesPriceCurrency !== undefined) {
      queryParameters['SalesPriceCurrency'] =
        requestParameters.salesPriceCurrency;
    }

    if (requestParameters.termRequired !== undefined) {
      queryParameters['TermRequired'] = requestParameters.termRequired;
    }

    if (requestParameters.publisherId !== undefined) {
      queryParameters['PublisherId'] = requestParameters.publisherId;
    }

    if (requestParameters.endDateFrom !== undefined) {
      queryParameters['EndDateFrom'] = (
        requestParameters.endDateFrom as any
      ).toISOString();
    }

    if (requestParameters.endDateTo !== undefined) {
      queryParameters['EndDateTo'] = (
        requestParameters.endDateTo as any
      ).toISOString();
    }

    if (requestParameters.page !== undefined) {
      queryParameters['Page'] = requestParameters.page;
    }

    if (requestParameters.pageSize !== undefined) {
      queryParameters['PageSize'] = requestParameters.pageSize;
    }

    if (requestParameters.search !== undefined) {
      queryParameters['Search'] = requestParameters.search;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('BearerAuth', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/Agreements`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, jsonValue =>
      jsonValue.map(AgreementFromJSON),
    );
  }

  /**
   */
  async listAgreements(
    requestParameters: ListAgreementsRequest,
    initOverrides?: RequestInit,
  ): Promise<Array<Agreement>> {
    const response = await this.listAgreementsRaw(
      requestParameters,
      initOverrides,
    );
    return await response.value();
  }
}
