/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  CustomerTenantAgreement,
  CustomerTenantAgreementFromJSON,
  CustomerTenantAgreementFromJSONTyped,
  CustomerTenantAgreementToJSON,
  CustomerTenantType,
  CustomerTenantTypeFromJSON,
  CustomerTenantTypeFromJSONTyped,
  CustomerTenantTypeToJSON,
  EntityStatus,
  EntityStatusFromJSON,
  EntityStatusFromJSONTyped,
  EntityStatusToJSON,
  ObjectReference,
  ObjectReferenceFromJSON,
  ObjectReferenceFromJSONTyped,
  ObjectReferenceToJSON,
  Organization,
  OrganizationFromJSON,
  OrganizationFromJSONTyped,
  OrganizationToJSON,
  SubscriptionPriceType,
  SubscriptionPriceTypeFromJSON,
  SubscriptionPriceTypeFromJSONTyped,
  SubscriptionPriceTypeToJSON,
} from './';

/**
 *
 * @export
 * @interface CustomerTenant
 */
export interface CustomerTenant {
  /**
   *
   * @type {number}
   * @memberof CustomerTenant
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof CustomerTenant
   */
  name?: string | null;
  /**
   *
   * @type {ObjectReference}
   * @memberof CustomerTenant
   */
  publisher?: ObjectReference;
  /**
   *
   * @type {ObjectReference}
   * @memberof CustomerTenant
   */
  program?: ObjectReference;
  /**
   *
   * @type {string}
   * @memberof CustomerTenant
   */
  publisherCustomerId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomerTenant
   */
  externalPublisherCustomerId?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomerTenant
   */
  domain?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomerTenant
   */
  domainPrefix?: string | null;
  /**
   *
   * @type {string}
   * @memberof CustomerTenant
   */
  reference?: string | null;
  /**
   *
   * @type {CustomerTenantType}
   * @memberof CustomerTenant
   */
  customerTenantType?: CustomerTenantType;
  /**
   *
   * @type {EntityStatus}
   * @memberof CustomerTenant
   */
  entityStatus?: EntityStatus;
  /**
   *
   * @type {Organization}
   * @memberof CustomerTenant
   */
  organization?: Organization;
  /**
   *
   * @type {ObjectReference}
   * @memberof CustomerTenant
   */
  invoiceProfile?: ObjectReference;
  /**
   *
   * @type {ObjectReference}
   * @memberof CustomerTenant
   */
  consumer?: ObjectReference;
  /**
   *
   * @type {number}
   * @memberof CustomerTenant
   */
  resellerMarkup?: number;
  /**
   *
   * @type {SubscriptionPriceType}
   * @memberof CustomerTenant
   */
  defaultSubscriptionPriceType?: SubscriptionPriceType;
  /**
   *
   * @type {CustomerTenantAgreement}
   * @memberof CustomerTenant
   */
  agreement?: CustomerTenantAgreement;
}

export function CustomerTenantFromJSON(json: any): CustomerTenant {
  return CustomerTenantFromJSONTyped(json, false);
}

export function CustomerTenantFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): CustomerTenant {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    name: !exists(json, 'name') ? undefined : json['name'],
    publisher: !exists(json, 'publisher')
      ? undefined
      : ObjectReferenceFromJSON(json['publisher']),
    program: !exists(json, 'program')
      ? undefined
      : ObjectReferenceFromJSON(json['program']),
    publisherCustomerId: !exists(json, 'publisherCustomerId')
      ? undefined
      : json['publisherCustomerId'],
    externalPublisherCustomerId: !exists(json, 'externalPublisherCustomerId')
      ? undefined
      : json['externalPublisherCustomerId'],
    domain: !exists(json, 'domain') ? undefined : json['domain'],
    domainPrefix: !exists(json, 'domainPrefix')
      ? undefined
      : json['domainPrefix'],
    reference: !exists(json, 'reference') ? undefined : json['reference'],
    customerTenantType: !exists(json, 'customerTenantType')
      ? undefined
      : CustomerTenantTypeFromJSON(json['customerTenantType']),
    entityStatus: !exists(json, 'entityStatus')
      ? undefined
      : EntityStatusFromJSON(json['entityStatus']),
    organization: !exists(json, 'organization')
      ? undefined
      : OrganizationFromJSON(json['organization']),
    invoiceProfile: !exists(json, 'invoiceProfile')
      ? undefined
      : ObjectReferenceFromJSON(json['invoiceProfile']),
    consumer: !exists(json, 'consumer')
      ? undefined
      : ObjectReferenceFromJSON(json['consumer']),
    resellerMarkup: !exists(json, 'resellerMarkup')
      ? undefined
      : json['resellerMarkup'],
    defaultSubscriptionPriceType: !exists(json, 'defaultSubscriptionPriceType')
      ? undefined
      : SubscriptionPriceTypeFromJSON(json['defaultSubscriptionPriceType']),
    agreement: !exists(json, 'agreement')
      ? undefined
      : CustomerTenantAgreementFromJSON(json['agreement']),
  };
}

export function CustomerTenantToJSON(value?: CustomerTenant | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    name: value.name,
    publisher: ObjectReferenceToJSON(value.publisher),
    program: ObjectReferenceToJSON(value.program),
    publisherCustomerId: value.publisherCustomerId,
    externalPublisherCustomerId: value.externalPublisherCustomerId,
    domain: value.domain,
    domainPrefix: value.domainPrefix,
    reference: value.reference,
    customerTenantType: CustomerTenantTypeToJSON(value.customerTenantType),
    entityStatus: EntityStatusToJSON(value.entityStatus),
    organization: OrganizationToJSON(value.organization),
    invoiceProfile: ObjectReferenceToJSON(value.invoiceProfile),
    consumer: ObjectReferenceToJSON(value.consumer),
    resellerMarkup: value.resellerMarkup,
    defaultSubscriptionPriceType: SubscriptionPriceTypeToJSON(
      value.defaultSubscriptionPriceType,
    ),
    agreement: CustomerTenantAgreementToJSON(value.agreement),
  };
}
