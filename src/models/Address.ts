/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressType,
    AddressTypeFromJSON,
    AddressTypeFromJSONTyped,
    AddressTypeToJSON,
    ObjectReference,
    ObjectReferenceFromJSON,
    ObjectReferenceFromJSONTyped,
    ObjectReferenceToJSON,
} from './';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {number}
     * @memberof Address
     */
    id?: number;
    /**
     * 
     * @type {ObjectReference}
     * @memberof Address
     */
    organization?: ObjectReference;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    completeAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    street?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    zipCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    city?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    county?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    state?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    countryCode?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof Address
     */
    primary?: boolean;
    /**
     * 
     * @type {AddressType}
     * @memberof Address
     */
    addressType?: AddressType;
}

export function AddressFromJSON(json: any): Address {
    return AddressFromJSONTyped(json, false);
}

export function AddressFromJSONTyped(json: any, ignoreDiscriminator: boolean): Address {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'organization': !exists(json, 'organization') ? undefined : ObjectReferenceFromJSON(json['organization']),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'completeAddress': !exists(json, 'completeAddress') ? undefined : json['completeAddress'],
        'street': !exists(json, 'street') ? undefined : json['street'],
        'zipCode': !exists(json, 'zipCode') ? undefined : json['zipCode'],
        'city': !exists(json, 'city') ? undefined : json['city'],
        'county': !exists(json, 'county') ? undefined : json['county'],
        'state': !exists(json, 'state') ? undefined : json['state'],
        'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
        'primary': !exists(json, 'primary') ? undefined : json['primary'],
        'addressType': !exists(json, 'addressType') ? undefined : AddressTypeFromJSON(json['addressType']),
    };
}

export function AddressToJSON(value?: Address | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'organization': ObjectReferenceToJSON(value.organization),
        'name': value.name,
        'completeAddress': value.completeAddress,
        'street': value.street,
        'zipCode': value.zipCode,
        'city': value.city,
        'county': value.county,
        'state': value.state,
        'countryCode': value.countryCode,
        'primary': value.primary,
        'addressType': AddressTypeToJSON(value.addressType),
    };
}

