/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  AgreementType,
  AgreementTypeFromJSON,
  AgreementTypeFromJSONTyped,
  AgreementTypeToJSON,
  ObjectReference,
  ObjectReferenceFromJSON,
  ObjectReferenceFromJSONTyped,
  ObjectReferenceToJSON,
} from './';

/**
 *
 * @export
 * @interface Agreement
 */
export interface Agreement {
  /**
   *
   * @type {number}
   * @memberof Agreement
   */
  id?: number;
  /**
   *
   * @type {ObjectReference}
   * @memberof Agreement
   */
  organization?: ObjectReference;
  /**
   *
   * @type {string}
   * @memberof Agreement
   */
  name?: string | null;
  /**
   *
   * @type {string}
   * @memberof Agreement
   */
  salesPriceCurrencyCode?: string | null;
  /**
   *
   * @type {Date}
   * @memberof Agreement
   */
  startDate?: Date;
  /**
   *
   * @type {Date}
   * @memberof Agreement
   */
  endDate?: Date;
  /**
   *
   * @type {boolean}
   * @memberof Agreement
   */
  disabled?: boolean;
  /**
   *
   * @type {ObjectReference}
   * @memberof Agreement
   */
  publisher?: ObjectReference;
  /**
   *
   * @type {ObjectReference}
   * @memberof Agreement
   */
  program?: ObjectReference;
  /**
   *
   * @type {string}
   * @memberof Agreement
   */
  number?: string | null;
  /**
   *
   * @type {string}
   * @memberof Agreement
   */
  customerNumber?: string | null;
  /**
   *
   * @type {string}
   * @memberof Agreement
   */
  masterAgreement?: string | null;
  /**
   *
   * @type {boolean}
   * @memberof Agreement
   */
  hasTerms?: boolean;
  /**
   *
   * @type {AgreementType}
   * @memberof Agreement
   */
  agreementType?: AgreementType;
  /**
   *
   * @type {number}
   * @memberof Agreement
   */
  parentAgreementId?: number | null;
  /**
   *
   * @type {number}
   * @memberof Agreement
   */
  commitmentLevel?: number;
  /**
   *
   * @type {number}
   * @memberof Agreement
   */
  consumerId?: number | null;
}

export function AgreementFromJSON(json: any): Agreement {
  return AgreementFromJSONTyped(json, false);
}

export function AgreementFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Agreement {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    organization: !exists(json, 'organization')
      ? undefined
      : ObjectReferenceFromJSON(json['organization']),
    name: !exists(json, 'name') ? undefined : json['name'],
    salesPriceCurrencyCode: !exists(json, 'salesPriceCurrencyCode')
      ? undefined
      : json['salesPriceCurrencyCode'],
    startDate: !exists(json, 'startDate')
      ? undefined
      : new Date(json['startDate']),
    endDate: !exists(json, 'endDate') ? undefined : new Date(json['endDate']),
    disabled: !exists(json, 'disabled') ? undefined : json['disabled'],
    publisher: !exists(json, 'publisher')
      ? undefined
      : ObjectReferenceFromJSON(json['publisher']),
    program: !exists(json, 'program')
      ? undefined
      : ObjectReferenceFromJSON(json['program']),
    number: !exists(json, 'number') ? undefined : json['number'],
    customerNumber: !exists(json, 'customerNumber')
      ? undefined
      : json['customerNumber'],
    masterAgreement: !exists(json, 'masterAgreement')
      ? undefined
      : json['masterAgreement'],
    hasTerms: !exists(json, 'hasTerms') ? undefined : json['hasTerms'],
    agreementType: !exists(json, 'agreementType')
      ? undefined
      : AgreementTypeFromJSON(json['agreementType']),
    parentAgreementId: !exists(json, 'parentAgreementId')
      ? undefined
      : json['parentAgreementId'],
    commitmentLevel: !exists(json, 'commitmentLevel')
      ? undefined
      : json['commitmentLevel'],
    consumerId: !exists(json, 'consumerId') ? undefined : json['consumerId'],
  };
}

export function AgreementToJSON(value?: Agreement | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    organization: ObjectReferenceToJSON(value.organization),
    name: value.name,
    salesPriceCurrencyCode: value.salesPriceCurrencyCode,
    startDate:
      value.startDate === undefined ? undefined : value.startDate.toISOString(),
    endDate:
      value.endDate === undefined ? undefined : value.endDate.toISOString(),
    disabled: value.disabled,
    publisher: ObjectReferenceToJSON(value.publisher),
    program: ObjectReferenceToJSON(value.program),
    number: value.number,
    customerNumber: value.customerNumber,
    masterAgreement: value.masterAgreement,
    hasTerms: value.hasTerms,
    agreementType: AgreementTypeToJSON(value.agreementType),
    parentAgreementId: value.parentAgreementId,
    commitmentLevel: value.commitmentLevel,
    consumerId: value.consumerId,
  };
}
