/* tslint:disable */
/* eslint-disable */
/**
 * Crayon Group Customer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
  ProductContainerCommentType,
  ProductContainerCommentTypeFromJSON,
  ProductContainerCommentTypeFromJSONTyped,
  ProductContainerCommentTypeToJSON,
  ProductContainerCommentUser,
  ProductContainerCommentUserFromJSON,
  ProductContainerCommentUserFromJSONTyped,
  ProductContainerCommentUserToJSON,
} from './';

/**
 *
 * @export
 * @interface ProductContainerComment
 */
export interface ProductContainerComment {
  /**
   *
   * @type {number}
   * @memberof ProductContainerComment
   */
  id?: number;
  /**
   *
   * @type {number}
   * @memberof ProductContainerComment
   */
  productContainerId?: number;
  /**
   *
   * @type {ProductContainerCommentUser}
   * @memberof ProductContainerComment
   */
  user?: ProductContainerCommentUser;
  /**
   *
   * @type {string}
   * @memberof ProductContainerComment
   */
  message?: string | null;
  /**
   *
   * @type {Date}
   * @memberof ProductContainerComment
   */
  timeStamp?: Date;
  /**
   *
   * @type {Date}
   * @memberof ProductContainerComment
   */
  modified?: Date | null;
  /**
   *
   * @type {boolean}
   * @memberof ProductContainerComment
   */
  removed?: boolean;
  /**
   *
   * @type {ProductContainerCommentType}
   * @memberof ProductContainerComment
   */
  productContainerCommentType?: ProductContainerCommentType;
}

export function ProductContainerCommentFromJSON(
  json: any,
): ProductContainerComment {
  return ProductContainerCommentFromJSONTyped(json, false);
}

export function ProductContainerCommentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProductContainerComment {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: !exists(json, 'id') ? undefined : json['id'],
    productContainerId: !exists(json, 'productContainerId')
      ? undefined
      : json['productContainerId'],
    user: !exists(json, 'user')
      ? undefined
      : ProductContainerCommentUserFromJSON(json['user']),
    message: !exists(json, 'message') ? undefined : json['message'],
    timeStamp: !exists(json, 'timeStamp')
      ? undefined
      : new Date(json['timeStamp']),
    modified: !exists(json, 'modified')
      ? undefined
      : json['modified'] === null
      ? null
      : new Date(json['modified']),
    removed: !exists(json, 'removed') ? undefined : json['removed'],
    productContainerCommentType: !exists(json, 'productContainerCommentType')
      ? undefined
      : ProductContainerCommentTypeFromJSON(
          json['productContainerCommentType'],
        ),
  };
}

export function ProductContainerCommentToJSON(
  value?: ProductContainerComment | null,
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    id: value.id,
    productContainerId: value.productContainerId,
    user: ProductContainerCommentUserToJSON(value.user),
    message: value.message,
    timeStamp:
      value.timeStamp === undefined ? undefined : value.timeStamp.toISOString(),
    modified:
      value.modified === undefined
        ? undefined
        : value.modified === null
        ? null
        : value.modified.toISOString(),
    removed: value.removed,
    productContainerCommentType: ProductContainerCommentTypeToJSON(
      value.productContainerCommentType,
    ),
  };
}
